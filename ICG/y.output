Terminals unused in grammar

    T_FOR
    T_DO
    T_GOTO
    T_SWITCH
    T_CASE
    T_DEFAULT
    T_SHORT
    T_LONG
    T_LONG_INT
    T_SIGNED
    T_UNSIGNED
    T_IFX


Grammar

    0 $accept: program $end

    1 program: declarations
    2        | %empty

    3 declarations: declaration declarations
    4             | declaration

    5 declaration: varDec ';'
    6            | funcDec

    7 varDec: type varDecList

    8 varDecList: varDecList ',' varDecType
    9           | varDecType

   10 varDecType: varOnlyDec
   11           | varInit

   12 varOnlyDec: T_IDENTIFIER
   13           | T_IDENTIFIER arrayDims

   14 arrayDims: '[' T_INT_CONSTANT ']'

   15 $@1: %empty

   16 varInit: varOnlyDec T_ASSIGN $@1 expression

   17 type: type pointer
   18     | T_INT
   19     | T_FLOAT
   20     | T_DOUBLE
   21     | T_CHAR
   22     | T_VOID
   23     | T_BOOL

   24 pointer: T_MULTIPLY pointer
   25        | T_MULTIPLY

   26 constants: T_HEX_CONSTANT
   27          | T_DEC_CONSTANT
   28          | T_INT_CONSTANT
   29          | T_BOOL_CONSTANT
   30          | T_STRING

   31 funcDec: funcOnlyDec ';'
   32        | funcDef

   33 funcOnlyDec: type funcName '(' params ')'

   34 funcName: T_MAIN
   35         | T_IDENTIFIER

   36 funcDef: funcOnlyDec blockStmt

   37 funcCall: T_IDENTIFIER '(' args ')' ';'

   38 params: paramList
   39       | %empty

   40 paramList: paramList ',' type paramID
   41          | paramID

   42 paramID: T_IDENTIFIER
   43        | T_IDENTIFIER '[' ']'

   44 args: argList
   45     | %empty

   46 argList: argList ',' expression
   47        | expression

   48 assignmentOp: T_ADD_ASSIGN
   49             | T_SUB_ASSIGN
   50             | T_MUL_ASSIGN
   51             | T_DIV_ASSIGN
   52             | T_MOD_ASSIGN
   53             | T_ASSIGN

   54 $@2: %empty

   55 expression: T_IDENTIFIER $@2 assignmentOp expression
   56           | incDecExpression
   57           | logicalExpression

   58 incDecExpression: T_INCREMENT T_IDENTIFIER
   59                 | T_IDENTIFIER T_INCREMENT
   60                 | T_DECREMENT T_IDENTIFIER
   61                 | T_IDENTIFIER T_DECREMENT

   62 $@3: %empty

   63 logicalExpression: logicalExpression T_LG_OR $@3 andExpression
   64                  | andExpression

   65 $@4: %empty

   66 andExpression: andExpression T_LG_AND $@4 notExpression
   67              | notExpression

   68 $@5: %empty

   69 notExpression: T_NOT $@5 notExpression
   70              | relExpression

   71 $@6: %empty

   72 relExpression: sumExpression T_GREATER_THAN $@6 sumExpression

   73 $@7: %empty

   74 relExpression: sumExpression T_LESSER_THAN $@7 sumExpression

   75 $@8: %empty

   76 relExpression: sumExpression T_LESSER_EQ $@8 sumExpression

   77 $@9: %empty

   78 relExpression: sumExpression T_GREATER_EQ $@9 sumExpression

   79 $@10: %empty

   80 relExpression: sumExpression T_NOT_EQ $@10 sumExpression

   81 $@11: %empty

   82 relExpression: sumExpression T_EQUAL $@11 sumExpression
   83              | sumExpression

   84 $@12: %empty

   85 sumExpression: sumExpression T_ADD $@12 prodExpression

   86 $@13: %empty

   87 sumExpression: sumExpression T_SUBTRACT $@13 prodExpression
   88              | prodExpression

   89 $@14: %empty

   90 prodExpression: prodExpression T_MULTIPLY $@14 unaryExpression

   91 $@15: %empty

   92 prodExpression: prodExpression T_DIVIDE $@15 unaryExpression

   93 $@16: %empty

   94 prodExpression: prodExpression T_MOD $@16 unaryExpression
   95               | unaryExpression

   96 $@17: %empty

   97 unaryExpression: T_ADD $@17 unaryExpression

   98 $@18: %empty

   99 unaryExpression: T_SUBTRACT $@18 unaryExpression
  100                | factor

  101 factor: T_IDENTIFIER
  102       | '(' expression ')'

  103 $@19: %empty

  104 factor: $@19 constants

  105 statement: expressionStmt
  106          | blockStmt
  107          | selectionStmt
  108          | iterationStmt
  109          | returnStmt
  110          | breakStmt
  111          | contStmt
  112          | funcCall
  113          | varDec ';'

  114 expressionStmt: expression ';'
  115               | ';'

  116 blockStmt: '{' stmtList '}'

  117 stmtList: stmtList statement
  118         | %empty

  119 $@20: %empty

  120 selectionStmt: T_IF '(' logicalExpression ')' $@20 blockStmt else

  121 $@21: %empty

  122 else: T_ELSE $@21 statement
  123     | %empty

  124 $@22: %empty

  125 iterationStmt: T_WHILE '(' logicalExpression ')' $@22 statement

  126 returnStmt: T_RETURN expressionStmt

  127 breakStmt: T_BREAK ';'

  128 contStmt: T_CONTINUE ';'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 33 37 102 120 125
    ')' (41) 33 37 102 120 125
    ',' (44) 8 40 46
    ';' (59) 5 31 37 113 114 115 127 128
    '[' (91) 14 43
    ']' (93) 14 43
    '{' (123) 116
    '}' (125) 116
    error (256)
    T_ADD (258) 85 97
    T_SUBTRACT (259) 87 99
    T_MULTIPLY (260) 24 25 90
    T_DIVIDE (261) 92
    T_ADD_ASSIGN (262) 48
    T_SUB_ASSIGN (263) 49
    T_MUL_ASSIGN (264) 50
    T_DIV_ASSIGN (265) 51
    T_MOD_ASSIGN (266) 52
    T_MOD (267) 94
    T_GREATER_THAN (268) 72
    T_LESSER_THAN (269) 74
    T_LESSER_EQ (270) 76
    T_GREATER_EQ (271) 78
    T_NOT_EQ (272) 80
    T_EQUAL (273) 82
    T_VOID (274) 22
    T_IF (275) 120
    T_ELSE (276) 122
    T_FOR (277)
    T_DO (278)
    T_WHILE (279) 125
    T_GOTO (280)
    T_BREAK (281) 127
    T_CONTINUE (282) 128
    T_RETURN (283) 126
    T_SWITCH (284)
    T_CASE (285)
    T_DEFAULT (286)
    T_MAIN (287) 34
    T_INT (288) 18
    T_FLOAT (289) 19
    T_DOUBLE (290) 20
    T_SHORT (291)
    T_LONG (292)
    T_LONG_INT (293)
    T_CHAR (294) 21
    T_SIGNED (295)
    T_UNSIGNED (296)
    T_BOOL (297) 23
    T_LG_OR (298) 63
    T_LG_AND (299) 66
    T_NOT (300) 69
    T_ASSIGN (301) 16 53
    T_DECREMENT (302) 60 61
    T_INCREMENT (303) 58 59
    T_HEX_CONSTANT <tbEntry> (304) 26
    T_DEC_CONSTANT <tbEntry> (305) 27
    T_INT_CONSTANT <tbEntry> (306) 14 28
    T_STRING <tbEntry> (307) 30
    T_BOOL_CONSTANT <tbEntry> (308) 29
    T_IDENTIFIER <tbEntry> (309) 12 13 35 37 42 43 55 58 59 60 61 101
    T_IFX (310)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program (65)
        on left: 1 2
        on right: 0
    declarations (66)
        on left: 3 4
        on right: 1 3
    declaration (67)
        on left: 5 6
        on right: 3 4
    varDec (68)
        on left: 7
        on right: 5 113
    varDecList (69)
        on left: 8 9
        on right: 7 8
    varDecType (70)
        on left: 10 11
        on right: 8 9
    varOnlyDec <tbEntry> (71)
        on left: 12 13
        on right: 10 16
    arrayDims <ival> (72)
        on left: 14
        on right: 13
    varInit (73)
        on left: 16
        on right: 11
    $@1 (74)
        on left: 15
        on right: 16
    type (75)
        on left: 17 18 19 20 21 22 23
        on right: 7 17 33 40
    pointer (76)
        on left: 24 25
        on right: 17 24
    constants <tbEntry> (77)
        on left: 26 27 28 29 30
        on right: 104
    funcDec (78)
        on left: 31 32
        on right: 6
    funcOnlyDec (79)
        on left: 33
        on right: 31 36
    funcName (80)
        on left: 34 35
        on right: 33
    funcDef (81)
        on left: 36
        on right: 32
    funcCall (82)
        on left: 37
        on right: 112
    params (83)
        on left: 38 39
        on right: 33
    paramList (84)
        on left: 40 41
        on right: 38 40
    paramID (85)
        on left: 42 43
        on right: 40 41
    args (86)
        on left: 44 45
        on right: 37
    argList (87)
        on left: 46 47
        on right: 44 46
    assignmentOp (88)
        on left: 48 49 50 51 52 53
        on right: 55
    expression <tbEntry> (89)
        on left: 55 56 57
        on right: 16 46 47 55 102 114
    $@2 (90)
        on left: 54
        on right: 55
    incDecExpression <tbEntry> (91)
        on left: 58 59 60 61
        on right: 56
    logicalExpression <tbEntry> (92)
        on left: 63 64
        on right: 57 63 120 125
    $@3 (93)
        on left: 62
        on right: 63
    andExpression <tbEntry> (94)
        on left: 66 67
        on right: 63 64 66
    $@4 (95)
        on left: 65
        on right: 66
    notExpression <tbEntry> (96)
        on left: 69 70
        on right: 66 67 69
    $@5 (97)
        on left: 68
        on right: 69
    relExpression <tbEntry> (98)
        on left: 72 74 76 78 80 82 83
        on right: 70
    $@6 (99)
        on left: 71
        on right: 72
    $@7 (100)
        on left: 73
        on right: 74
    $@8 (101)
        on left: 75
        on right: 76
    $@9 (102)
        on left: 77
        on right: 78
    $@10 (103)
        on left: 79
        on right: 80
    $@11 (104)
        on left: 81
        on right: 82
    sumExpression <tbEntry> (105)
        on left: 85 87 88
        on right: 72 74 76 78 80 82 83 85 87
    $@12 (106)
        on left: 84
        on right: 85
    $@13 (107)
        on left: 86
        on right: 87
    prodExpression <tbEntry> (108)
        on left: 90 92 94 95
        on right: 85 87 88 90 92 94
    $@14 (109)
        on left: 89
        on right: 90
    $@15 (110)
        on left: 91
        on right: 92
    $@16 (111)
        on left: 93
        on right: 94
    unaryExpression <tbEntry> (112)
        on left: 97 99 100
        on right: 90 92 94 95 97 99
    $@17 (113)
        on left: 96
        on right: 97
    $@18 (114)
        on left: 98
        on right: 99
    factor <tbEntry> (115)
        on left: 101 102 104
        on right: 100
    $@19 (116)
        on left: 103
        on right: 104
    statement (117)
        on left: 105 106 107 108 109 110 111 112 113
        on right: 117 122 125
    expressionStmt <tbEntry> (118)
        on left: 114 115
        on right: 105 126
    blockStmt (119)
        on left: 116
        on right: 36 106 120
    stmtList (120)
        on left: 117 118
        on right: 116 117
    selectionStmt (121)
        on left: 120
        on right: 107
    $@20 (122)
        on left: 119
        on right: 120
    else (123)
        on left: 122 123
        on right: 120
    $@21 (124)
        on left: 121
        on right: 122
    iterationStmt (125)
        on left: 125
        on right: 108
    $@22 (126)
        on left: 124
        on right: 125
    returnStmt (127)
        on left: 126
        on right: 109
    breakStmt (128)
        on left: 127
        on right: 110
    contStmt (129)
        on left: 128
        on right: 111


State 0

    0 $accept: . program $end

    T_VOID    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_DOUBLE  shift, and go to state 4
    T_CHAR    shift, and go to state 5
    T_BOOL    shift, and go to state 6

    $default  reduce using rule 2 (program)

    program       go to state 7
    declarations  go to state 8
    declaration   go to state 9
    varDec        go to state 10
    type          go to state 11
    funcDec       go to state 12
    funcOnlyDec   go to state 13
    funcDef       go to state 14


State 1

   22 type: T_VOID .

    $default  reduce using rule 22 (type)


State 2

   18 type: T_INT .

    $default  reduce using rule 18 (type)


State 3

   19 type: T_FLOAT .

    $default  reduce using rule 19 (type)


State 4

   20 type: T_DOUBLE .

    $default  reduce using rule 20 (type)


State 5

   21 type: T_CHAR .

    $default  reduce using rule 21 (type)


State 6

   23 type: T_BOOL .

    $default  reduce using rule 23 (type)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 15


State 8

    1 program: declarations .

    $default  reduce using rule 1 (program)


State 9

    3 declarations: declaration . declarations
    4             | declaration .

    T_VOID    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_DOUBLE  shift, and go to state 4
    T_CHAR    shift, and go to state 5
    T_BOOL    shift, and go to state 6

    $default  reduce using rule 4 (declarations)

    declarations  go to state 16
    declaration   go to state 9
    varDec        go to state 10
    type          go to state 11
    funcDec       go to state 12
    funcOnlyDec   go to state 13
    funcDef       go to state 14


State 10

    5 declaration: varDec . ';'

    ';'  shift, and go to state 17


State 11

    7 varDec: type . varDecList
   17 type: type . pointer
   33 funcOnlyDec: type . funcName '(' params ')'

    T_MULTIPLY    shift, and go to state 18
    T_MAIN        shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20

    varDecList  go to state 21
    varDecType  go to state 22
    varOnlyDec  go to state 23
    varInit     go to state 24
    pointer     go to state 25
    funcName    go to state 26


State 12

    6 declaration: funcDec .

    $default  reduce using rule 6 (declaration)


State 13

   31 funcDec: funcOnlyDec . ';'
   36 funcDef: funcOnlyDec . blockStmt

    ';'  shift, and go to state 27
    '{'  shift, and go to state 28

    blockStmt  go to state 29


State 14

   32 funcDec: funcDef .

    $default  reduce using rule 32 (funcDec)


State 15

    0 $accept: program $end .

    $default  accept


State 16

    3 declarations: declaration declarations .

    $default  reduce using rule 3 (declarations)


State 17

    5 declaration: varDec ';' .

    $default  reduce using rule 5 (declaration)


State 18

   24 pointer: T_MULTIPLY . pointer
   25        | T_MULTIPLY .

    $default  reduce using rule 25 (pointer)

    pointer  go to state 30


State 19

   34 funcName: T_MAIN .

    $default  reduce using rule 34 (funcName)


State 20

   12 varOnlyDec: T_IDENTIFIER .
   13           | T_IDENTIFIER . arrayDims
   35 funcName: T_IDENTIFIER .

    '['  shift, and go to state 31

    '('       reduce using rule 35 (funcName)
    $default  reduce using rule 12 (varOnlyDec)

    arrayDims  go to state 32


State 21

    7 varDec: type varDecList .
    8 varDecList: varDecList . ',' varDecType

    ','  shift, and go to state 33

    $default  reduce using rule 7 (varDec)


State 22

    9 varDecList: varDecType .

    $default  reduce using rule 9 (varDecList)


State 23

   10 varDecType: varOnlyDec .
   16 varInit: varOnlyDec . T_ASSIGN $@1 expression

    T_ASSIGN  shift, and go to state 34

    $default  reduce using rule 10 (varDecType)


State 24

   11 varDecType: varInit .

    $default  reduce using rule 11 (varDecType)


State 25

   17 type: type pointer .

    $default  reduce using rule 17 (type)


State 26

   33 funcOnlyDec: type funcName . '(' params ')'

    '('  shift, and go to state 35


State 27

   31 funcDec: funcOnlyDec ';' .

    $default  reduce using rule 31 (funcDec)


State 28

  116 blockStmt: '{' . stmtList '}'

    $default  reduce using rule 118 (stmtList)

    stmtList  go to state 36


State 29

   36 funcDef: funcOnlyDec blockStmt .

    $default  reduce using rule 36 (funcDef)


State 30

   24 pointer: T_MULTIPLY pointer .

    $default  reduce using rule 24 (pointer)


State 31

   14 arrayDims: '[' . T_INT_CONSTANT ']'

    T_INT_CONSTANT  shift, and go to state 37


State 32

   13 varOnlyDec: T_IDENTIFIER arrayDims .

    $default  reduce using rule 13 (varOnlyDec)


State 33

    8 varDecList: varDecList ',' . varDecType

    T_IDENTIFIER  shift, and go to state 38

    varDecType  go to state 39
    varOnlyDec  go to state 23
    varInit     go to state 24


State 34

   16 varInit: varOnlyDec T_ASSIGN . $@1 expression

    $default  reduce using rule 15 ($@1)

    $@1  go to state 40


State 35

   33 funcOnlyDec: type funcName '(' . params ')'

    T_IDENTIFIER  shift, and go to state 41

    $default  reduce using rule 39 (params)

    params     go to state 42
    paramList  go to state 43
    paramID    go to state 44


State 36

  116 blockStmt: '{' stmtList . '}'
  117 stmtList: stmtList . statement

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_VOID        shift, and go to state 1
    T_IF          shift, and go to state 47
    T_WHILE       shift, and go to state 48
    T_BREAK       shift, and go to state 49
    T_CONTINUE    shift, and go to state 50
    T_RETURN      shift, and go to state 51
    T_INT         shift, and go to state 2
    T_FLOAT       shift, and go to state 3
    T_DOUBLE      shift, and go to state 4
    T_CHAR        shift, and go to state 5
    T_BOOL        shift, and go to state 6
    T_NOT         shift, and go to state 52
    T_DECREMENT   shift, and go to state 53
    T_INCREMENT   shift, and go to state 54
    T_IDENTIFIER  shift, and go to state 55
    ';'           shift, and go to state 56
    '('           shift, and go to state 57
    '{'           shift, and go to state 28
    '}'           shift, and go to state 58

    $default  reduce using rule 103 ($@19)

    varDec             go to state 59
    type               go to state 60
    funcCall           go to state 61
    expression         go to state 62
    incDecExpression   go to state 63
    logicalExpression  go to state 64
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72
    statement          go to state 73
    expressionStmt     go to state 74
    blockStmt          go to state 75
    selectionStmt      go to state 76
    iterationStmt      go to state 77
    returnStmt         go to state 78
    breakStmt          go to state 79
    contStmt           go to state 80


State 37

   14 arrayDims: '[' T_INT_CONSTANT . ']'

    ']'  shift, and go to state 81


State 38

   12 varOnlyDec: T_IDENTIFIER .
   13           | T_IDENTIFIER . arrayDims

    '['  shift, and go to state 31

    $default  reduce using rule 12 (varOnlyDec)

    arrayDims  go to state 32


State 39

    8 varDecList: varDecList ',' varDecType .

    $default  reduce using rule 8 (varDecList)


State 40

   16 varInit: varOnlyDec T_ASSIGN $@1 . expression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_DECREMENT   shift, and go to state 53
    T_INCREMENT   shift, and go to state 54
    T_IDENTIFIER  shift, and go to state 82
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    expression         go to state 83
    incDecExpression   go to state 63
    logicalExpression  go to state 64
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72


State 41

   42 paramID: T_IDENTIFIER .
   43        | T_IDENTIFIER . '[' ']'

    '['  shift, and go to state 84

    $default  reduce using rule 42 (paramID)


State 42

   33 funcOnlyDec: type funcName '(' params . ')'

    ')'  shift, and go to state 85


State 43

   38 params: paramList .
   40 paramList: paramList . ',' type paramID

    ','  shift, and go to state 86

    $default  reduce using rule 38 (params)


State 44

   41 paramList: paramID .

    $default  reduce using rule 41 (paramList)


State 45

   97 unaryExpression: T_ADD . $@17 unaryExpression

    $default  reduce using rule 96 ($@17)

    $@17  go to state 87


State 46

   99 unaryExpression: T_SUBTRACT . $@18 unaryExpression

    $default  reduce using rule 98 ($@18)

    $@18  go to state 88


State 47

  120 selectionStmt: T_IF . '(' logicalExpression ')' $@20 blockStmt else

    '('  shift, and go to state 89


State 48

  125 iterationStmt: T_WHILE . '(' logicalExpression ')' $@22 statement

    '('  shift, and go to state 90


State 49

  127 breakStmt: T_BREAK . ';'

    ';'  shift, and go to state 91


State 50

  128 contStmt: T_CONTINUE . ';'

    ';'  shift, and go to state 92


State 51

  126 returnStmt: T_RETURN . expressionStmt

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_DECREMENT   shift, and go to state 53
    T_INCREMENT   shift, and go to state 54
    T_IDENTIFIER  shift, and go to state 82
    ';'           shift, and go to state 56
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    expression         go to state 62
    incDecExpression   go to state 63
    logicalExpression  go to state 64
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72
    expressionStmt     go to state 93


State 52

   69 notExpression: T_NOT . $@5 notExpression

    $default  reduce using rule 68 ($@5)

    $@5  go to state 94


State 53

   60 incDecExpression: T_DECREMENT . T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 95


State 54

   58 incDecExpression: T_INCREMENT . T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 96


State 55

   37 funcCall: T_IDENTIFIER . '(' args ')' ';'
   55 expression: T_IDENTIFIER . $@2 assignmentOp expression
   59 incDecExpression: T_IDENTIFIER . T_INCREMENT
   61                 | T_IDENTIFIER . T_DECREMENT
  101 factor: T_IDENTIFIER .

    T_DECREMENT  shift, and go to state 97
    T_INCREMENT  shift, and go to state 98
    '('          shift, and go to state 99

    T_ADD_ASSIGN  reduce using rule 54 ($@2)
    T_SUB_ASSIGN  reduce using rule 54 ($@2)
    T_MUL_ASSIGN  reduce using rule 54 ($@2)
    T_DIV_ASSIGN  reduce using rule 54 ($@2)
    T_MOD_ASSIGN  reduce using rule 54 ($@2)
    T_ASSIGN      reduce using rule 54 ($@2)
    $default      reduce using rule 101 (factor)

    $@2  go to state 100


State 56

  115 expressionStmt: ';' .

    $default  reduce using rule 115 (expressionStmt)


State 57

  102 factor: '(' . expression ')'

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_DECREMENT   shift, and go to state 53
    T_INCREMENT   shift, and go to state 54
    T_IDENTIFIER  shift, and go to state 82
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    expression         go to state 101
    incDecExpression   go to state 63
    logicalExpression  go to state 64
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72


State 58

  116 blockStmt: '{' stmtList '}' .

    $default  reduce using rule 116 (blockStmt)


State 59

  113 statement: varDec . ';'

    ';'  shift, and go to state 102


State 60

    7 varDec: type . varDecList
   17 type: type . pointer

    T_MULTIPLY    shift, and go to state 18
    T_IDENTIFIER  shift, and go to state 38

    varDecList  go to state 21
    varDecType  go to state 22
    varOnlyDec  go to state 23
    varInit     go to state 24
    pointer     go to state 25


State 61

  112 statement: funcCall .

    $default  reduce using rule 112 (statement)


State 62

  114 expressionStmt: expression . ';'

    ';'  shift, and go to state 103


State 63

   56 expression: incDecExpression .

    $default  reduce using rule 56 (expression)


State 64

   57 expression: logicalExpression .
   63 logicalExpression: logicalExpression . T_LG_OR $@3 andExpression

    T_LG_OR  shift, and go to state 104

    $default  reduce using rule 57 (expression)


State 65

   64 logicalExpression: andExpression .
   66 andExpression: andExpression . T_LG_AND $@4 notExpression

    T_LG_AND  shift, and go to state 105

    $default  reduce using rule 64 (logicalExpression)


State 66

   67 andExpression: notExpression .

    $default  reduce using rule 67 (andExpression)


State 67

   70 notExpression: relExpression .

    $default  reduce using rule 70 (notExpression)


State 68

   72 relExpression: sumExpression . T_GREATER_THAN $@6 sumExpression
   74              | sumExpression . T_LESSER_THAN $@7 sumExpression
   76              | sumExpression . T_LESSER_EQ $@8 sumExpression
   78              | sumExpression . T_GREATER_EQ $@9 sumExpression
   80              | sumExpression . T_NOT_EQ $@10 sumExpression
   82              | sumExpression . T_EQUAL $@11 sumExpression
   83              | sumExpression .
   85 sumExpression: sumExpression . T_ADD $@12 prodExpression
   87              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD           shift, and go to state 106
    T_SUBTRACT      shift, and go to state 107
    T_GREATER_THAN  shift, and go to state 108
    T_LESSER_THAN   shift, and go to state 109
    T_LESSER_EQ     shift, and go to state 110
    T_GREATER_EQ    shift, and go to state 111
    T_NOT_EQ        shift, and go to state 112
    T_EQUAL         shift, and go to state 113

    $default  reduce using rule 83 (relExpression)


State 69

   88 sumExpression: prodExpression .
   90 prodExpression: prodExpression . T_MULTIPLY $@14 unaryExpression
   92               | prodExpression . T_DIVIDE $@15 unaryExpression
   94               | prodExpression . T_MOD $@16 unaryExpression

    T_MULTIPLY  shift, and go to state 114
    T_DIVIDE    shift, and go to state 115
    T_MOD       shift, and go to state 116

    $default  reduce using rule 88 (sumExpression)


State 70

   95 prodExpression: unaryExpression .

    $default  reduce using rule 95 (prodExpression)


State 71

  100 unaryExpression: factor .

    $default  reduce using rule 100 (unaryExpression)


State 72

  104 factor: $@19 . constants

    T_HEX_CONSTANT   shift, and go to state 117
    T_DEC_CONSTANT   shift, and go to state 118
    T_INT_CONSTANT   shift, and go to state 119
    T_STRING         shift, and go to state 120
    T_BOOL_CONSTANT  shift, and go to state 121

    constants  go to state 122


State 73

  117 stmtList: stmtList statement .

    $default  reduce using rule 117 (stmtList)


State 74

  105 statement: expressionStmt .

    $default  reduce using rule 105 (statement)


State 75

  106 statement: blockStmt .

    $default  reduce using rule 106 (statement)


State 76

  107 statement: selectionStmt .

    $default  reduce using rule 107 (statement)


State 77

  108 statement: iterationStmt .

    $default  reduce using rule 108 (statement)


State 78

  109 statement: returnStmt .

    $default  reduce using rule 109 (statement)


State 79

  110 statement: breakStmt .

    $default  reduce using rule 110 (statement)


State 80

  111 statement: contStmt .

    $default  reduce using rule 111 (statement)


State 81

   14 arrayDims: '[' T_INT_CONSTANT ']' .

    $default  reduce using rule 14 (arrayDims)


State 82

   55 expression: T_IDENTIFIER . $@2 assignmentOp expression
   59 incDecExpression: T_IDENTIFIER . T_INCREMENT
   61                 | T_IDENTIFIER . T_DECREMENT
  101 factor: T_IDENTIFIER .

    T_DECREMENT  shift, and go to state 97
    T_INCREMENT  shift, and go to state 98

    T_ADD_ASSIGN  reduce using rule 54 ($@2)
    T_SUB_ASSIGN  reduce using rule 54 ($@2)
    T_MUL_ASSIGN  reduce using rule 54 ($@2)
    T_DIV_ASSIGN  reduce using rule 54 ($@2)
    T_MOD_ASSIGN  reduce using rule 54 ($@2)
    T_ASSIGN      reduce using rule 54 ($@2)
    $default      reduce using rule 101 (factor)

    $@2  go to state 100


State 83

   16 varInit: varOnlyDec T_ASSIGN $@1 expression .

    $default  reduce using rule 16 (varInit)


State 84

   43 paramID: T_IDENTIFIER '[' . ']'

    ']'  shift, and go to state 123


State 85

   33 funcOnlyDec: type funcName '(' params ')' .

    $default  reduce using rule 33 (funcOnlyDec)


State 86

   40 paramList: paramList ',' . type paramID

    T_VOID    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_DOUBLE  shift, and go to state 4
    T_CHAR    shift, and go to state 5
    T_BOOL    shift, and go to state 6

    type  go to state 124


State 87

   97 unaryExpression: T_ADD $@17 . unaryExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    unaryExpression  go to state 126
    factor           go to state 71
    $@19             go to state 72


State 88

   99 unaryExpression: T_SUBTRACT $@18 . unaryExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    unaryExpression  go to state 127
    factor           go to state 71
    $@19             go to state 72


State 89

  120 selectionStmt: T_IF '(' . logicalExpression ')' $@20 blockStmt else

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    logicalExpression  go to state 128
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72


State 90

  125 iterationStmt: T_WHILE '(' . logicalExpression ')' $@22 statement

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    logicalExpression  go to state 129
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72


State 91

  127 breakStmt: T_BREAK ';' .

    $default  reduce using rule 127 (breakStmt)


State 92

  128 contStmt: T_CONTINUE ';' .

    $default  reduce using rule 128 (contStmt)


State 93

  126 returnStmt: T_RETURN expressionStmt .

    $default  reduce using rule 126 (returnStmt)


State 94

   69 notExpression: T_NOT $@5 . notExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    notExpression    go to state 130
    relExpression    go to state 67
    sumExpression    go to state 68
    prodExpression   go to state 69
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 95

   60 incDecExpression: T_DECREMENT T_IDENTIFIER .

    $default  reduce using rule 60 (incDecExpression)


State 96

   58 incDecExpression: T_INCREMENT T_IDENTIFIER .

    $default  reduce using rule 58 (incDecExpression)


State 97

   61 incDecExpression: T_IDENTIFIER T_DECREMENT .

    $default  reduce using rule 61 (incDecExpression)


State 98

   59 incDecExpression: T_IDENTIFIER T_INCREMENT .

    $default  reduce using rule 59 (incDecExpression)


State 99

   37 funcCall: T_IDENTIFIER '(' . args ')' ';'

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_DECREMENT   shift, and go to state 53
    T_INCREMENT   shift, and go to state 54
    T_IDENTIFIER  shift, and go to state 82
    '('           shift, and go to state 57

    ')'       reduce using rule 45 (args)
    $default  reduce using rule 103 ($@19)

    args               go to state 131
    argList            go to state 132
    expression         go to state 133
    incDecExpression   go to state 63
    logicalExpression  go to state 64
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72


State 100

   55 expression: T_IDENTIFIER $@2 . assignmentOp expression

    T_ADD_ASSIGN  shift, and go to state 134
    T_SUB_ASSIGN  shift, and go to state 135
    T_MUL_ASSIGN  shift, and go to state 136
    T_DIV_ASSIGN  shift, and go to state 137
    T_MOD_ASSIGN  shift, and go to state 138
    T_ASSIGN      shift, and go to state 139

    assignmentOp  go to state 140


State 101

  102 factor: '(' expression . ')'

    ')'  shift, and go to state 141


State 102

  113 statement: varDec ';' .

    $default  reduce using rule 113 (statement)


State 103

  114 expressionStmt: expression ';' .

    $default  reduce using rule 114 (expressionStmt)


State 104

   63 logicalExpression: logicalExpression T_LG_OR . $@3 andExpression

    $default  reduce using rule 62 ($@3)

    $@3  go to state 142


State 105

   66 andExpression: andExpression T_LG_AND . $@4 notExpression

    $default  reduce using rule 65 ($@4)

    $@4  go to state 143


State 106

   85 sumExpression: sumExpression T_ADD . $@12 prodExpression

    $default  reduce using rule 84 ($@12)

    $@12  go to state 144


State 107

   87 sumExpression: sumExpression T_SUBTRACT . $@13 prodExpression

    $default  reduce using rule 86 ($@13)

    $@13  go to state 145


State 108

   72 relExpression: sumExpression T_GREATER_THAN . $@6 sumExpression

    $default  reduce using rule 71 ($@6)

    $@6  go to state 146


State 109

   74 relExpression: sumExpression T_LESSER_THAN . $@7 sumExpression

    $default  reduce using rule 73 ($@7)

    $@7  go to state 147


State 110

   76 relExpression: sumExpression T_LESSER_EQ . $@8 sumExpression

    $default  reduce using rule 75 ($@8)

    $@8  go to state 148


State 111

   78 relExpression: sumExpression T_GREATER_EQ . $@9 sumExpression

    $default  reduce using rule 77 ($@9)

    $@9  go to state 149


State 112

   80 relExpression: sumExpression T_NOT_EQ . $@10 sumExpression

    $default  reduce using rule 79 ($@10)

    $@10  go to state 150


State 113

   82 relExpression: sumExpression T_EQUAL . $@11 sumExpression

    $default  reduce using rule 81 ($@11)

    $@11  go to state 151


State 114

   90 prodExpression: prodExpression T_MULTIPLY . $@14 unaryExpression

    $default  reduce using rule 89 ($@14)

    $@14  go to state 152


State 115

   92 prodExpression: prodExpression T_DIVIDE . $@15 unaryExpression

    $default  reduce using rule 91 ($@15)

    $@15  go to state 153


State 116

   94 prodExpression: prodExpression T_MOD . $@16 unaryExpression

    $default  reduce using rule 93 ($@16)

    $@16  go to state 154


State 117

   26 constants: T_HEX_CONSTANT .

    $default  reduce using rule 26 (constants)


State 118

   27 constants: T_DEC_CONSTANT .

    $default  reduce using rule 27 (constants)


State 119

   28 constants: T_INT_CONSTANT .

    $default  reduce using rule 28 (constants)


State 120

   30 constants: T_STRING .

    $default  reduce using rule 30 (constants)


State 121

   29 constants: T_BOOL_CONSTANT .

    $default  reduce using rule 29 (constants)


State 122

  104 factor: $@19 constants .

    $default  reduce using rule 104 (factor)


State 123

   43 paramID: T_IDENTIFIER '[' ']' .

    $default  reduce using rule 43 (paramID)


State 124

   17 type: type . pointer
   40 paramList: paramList ',' type . paramID

    T_MULTIPLY    shift, and go to state 18
    T_IDENTIFIER  shift, and go to state 41

    pointer  go to state 25
    paramID  go to state 155


State 125

  101 factor: T_IDENTIFIER .

    $default  reduce using rule 101 (factor)


State 126

   97 unaryExpression: T_ADD $@17 unaryExpression .

    $default  reduce using rule 97 (unaryExpression)


State 127

   99 unaryExpression: T_SUBTRACT $@18 unaryExpression .

    $default  reduce using rule 99 (unaryExpression)


State 128

   63 logicalExpression: logicalExpression . T_LG_OR $@3 andExpression
  120 selectionStmt: T_IF '(' logicalExpression . ')' $@20 blockStmt else

    T_LG_OR  shift, and go to state 104
    ')'      shift, and go to state 156


State 129

   63 logicalExpression: logicalExpression . T_LG_OR $@3 andExpression
  125 iterationStmt: T_WHILE '(' logicalExpression . ')' $@22 statement

    T_LG_OR  shift, and go to state 104
    ')'      shift, and go to state 157


State 130

   69 notExpression: T_NOT $@5 notExpression .

    $default  reduce using rule 69 (notExpression)


State 131

   37 funcCall: T_IDENTIFIER '(' args . ')' ';'

    ')'  shift, and go to state 158


State 132

   44 args: argList .
   46 argList: argList . ',' expression

    ','  shift, and go to state 159

    $default  reduce using rule 44 (args)


State 133

   47 argList: expression .

    $default  reduce using rule 47 (argList)


State 134

   48 assignmentOp: T_ADD_ASSIGN .

    $default  reduce using rule 48 (assignmentOp)


State 135

   49 assignmentOp: T_SUB_ASSIGN .

    $default  reduce using rule 49 (assignmentOp)


State 136

   50 assignmentOp: T_MUL_ASSIGN .

    $default  reduce using rule 50 (assignmentOp)


State 137

   51 assignmentOp: T_DIV_ASSIGN .

    $default  reduce using rule 51 (assignmentOp)


State 138

   52 assignmentOp: T_MOD_ASSIGN .

    $default  reduce using rule 52 (assignmentOp)


State 139

   53 assignmentOp: T_ASSIGN .

    $default  reduce using rule 53 (assignmentOp)


State 140

   55 expression: T_IDENTIFIER $@2 assignmentOp . expression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_DECREMENT   shift, and go to state 53
    T_INCREMENT   shift, and go to state 54
    T_IDENTIFIER  shift, and go to state 82
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    expression         go to state 160
    incDecExpression   go to state 63
    logicalExpression  go to state 64
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72


State 141

  102 factor: '(' expression ')' .

    $default  reduce using rule 102 (factor)


State 142

   63 logicalExpression: logicalExpression T_LG_OR $@3 . andExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    andExpression    go to state 161
    notExpression    go to state 66
    relExpression    go to state 67
    sumExpression    go to state 68
    prodExpression   go to state 69
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 143

   66 andExpression: andExpression T_LG_AND $@4 . notExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    notExpression    go to state 162
    relExpression    go to state 67
    sumExpression    go to state 68
    prodExpression   go to state 69
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 144

   85 sumExpression: sumExpression T_ADD $@12 . prodExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    prodExpression   go to state 163
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 145

   87 sumExpression: sumExpression T_SUBTRACT $@13 . prodExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    prodExpression   go to state 164
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 146

   72 relExpression: sumExpression T_GREATER_THAN $@6 . sumExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    sumExpression    go to state 165
    prodExpression   go to state 69
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 147

   74 relExpression: sumExpression T_LESSER_THAN $@7 . sumExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    sumExpression    go to state 166
    prodExpression   go to state 69
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 148

   76 relExpression: sumExpression T_LESSER_EQ $@8 . sumExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    sumExpression    go to state 167
    prodExpression   go to state 69
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 149

   78 relExpression: sumExpression T_GREATER_EQ $@9 . sumExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    sumExpression    go to state 168
    prodExpression   go to state 69
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 150

   80 relExpression: sumExpression T_NOT_EQ $@10 . sumExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    sumExpression    go to state 169
    prodExpression   go to state 69
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 151

   82 relExpression: sumExpression T_EQUAL $@11 . sumExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    sumExpression    go to state 170
    prodExpression   go to state 69
    unaryExpression  go to state 70
    factor           go to state 71
    $@19             go to state 72


State 152

   90 prodExpression: prodExpression T_MULTIPLY $@14 . unaryExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    unaryExpression  go to state 171
    factor           go to state 71
    $@19             go to state 72


State 153

   92 prodExpression: prodExpression T_DIVIDE $@15 . unaryExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    unaryExpression  go to state 172
    factor           go to state 71
    $@19             go to state 72


State 154

   94 prodExpression: prodExpression T_MOD $@16 . unaryExpression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_IDENTIFIER  shift, and go to state 125
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    unaryExpression  go to state 173
    factor           go to state 71
    $@19             go to state 72


State 155

   40 paramList: paramList ',' type paramID .

    $default  reduce using rule 40 (paramList)


State 156

  120 selectionStmt: T_IF '(' logicalExpression ')' . $@20 blockStmt else

    $default  reduce using rule 119 ($@20)

    $@20  go to state 174


State 157

  125 iterationStmt: T_WHILE '(' logicalExpression ')' . $@22 statement

    $default  reduce using rule 124 ($@22)

    $@22  go to state 175


State 158

   37 funcCall: T_IDENTIFIER '(' args ')' . ';'

    ';'  shift, and go to state 176


State 159

   46 argList: argList ',' . expression

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_NOT         shift, and go to state 52
    T_DECREMENT   shift, and go to state 53
    T_INCREMENT   shift, and go to state 54
    T_IDENTIFIER  shift, and go to state 82
    '('           shift, and go to state 57

    $default  reduce using rule 103 ($@19)

    expression         go to state 177
    incDecExpression   go to state 63
    logicalExpression  go to state 64
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72


State 160

   55 expression: T_IDENTIFIER $@2 assignmentOp expression .

    $default  reduce using rule 55 (expression)


State 161

   63 logicalExpression: logicalExpression T_LG_OR $@3 andExpression .
   66 andExpression: andExpression . T_LG_AND $@4 notExpression

    T_LG_AND  shift, and go to state 105

    $default  reduce using rule 63 (logicalExpression)


State 162

   66 andExpression: andExpression T_LG_AND $@4 notExpression .

    $default  reduce using rule 66 (andExpression)


State 163

   85 sumExpression: sumExpression T_ADD $@12 prodExpression .
   90 prodExpression: prodExpression . T_MULTIPLY $@14 unaryExpression
   92               | prodExpression . T_DIVIDE $@15 unaryExpression
   94               | prodExpression . T_MOD $@16 unaryExpression

    T_MULTIPLY  shift, and go to state 114
    T_DIVIDE    shift, and go to state 115
    T_MOD       shift, and go to state 116

    $default  reduce using rule 85 (sumExpression)


State 164

   87 sumExpression: sumExpression T_SUBTRACT $@13 prodExpression .
   90 prodExpression: prodExpression . T_MULTIPLY $@14 unaryExpression
   92               | prodExpression . T_DIVIDE $@15 unaryExpression
   94               | prodExpression . T_MOD $@16 unaryExpression

    T_MULTIPLY  shift, and go to state 114
    T_DIVIDE    shift, and go to state 115
    T_MOD       shift, and go to state 116

    $default  reduce using rule 87 (sumExpression)


State 165

   72 relExpression: sumExpression T_GREATER_THAN $@6 sumExpression .
   85 sumExpression: sumExpression . T_ADD $@12 prodExpression
   87              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 106
    T_SUBTRACT  shift, and go to state 107

    $default  reduce using rule 72 (relExpression)


State 166

   74 relExpression: sumExpression T_LESSER_THAN $@7 sumExpression .
   85 sumExpression: sumExpression . T_ADD $@12 prodExpression
   87              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 106
    T_SUBTRACT  shift, and go to state 107

    $default  reduce using rule 74 (relExpression)


State 167

   76 relExpression: sumExpression T_LESSER_EQ $@8 sumExpression .
   85 sumExpression: sumExpression . T_ADD $@12 prodExpression
   87              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 106
    T_SUBTRACT  shift, and go to state 107

    $default  reduce using rule 76 (relExpression)


State 168

   78 relExpression: sumExpression T_GREATER_EQ $@9 sumExpression .
   85 sumExpression: sumExpression . T_ADD $@12 prodExpression
   87              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 106
    T_SUBTRACT  shift, and go to state 107

    $default  reduce using rule 78 (relExpression)


State 169

   80 relExpression: sumExpression T_NOT_EQ $@10 sumExpression .
   85 sumExpression: sumExpression . T_ADD $@12 prodExpression
   87              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 106
    T_SUBTRACT  shift, and go to state 107

    $default  reduce using rule 80 (relExpression)


State 170

   82 relExpression: sumExpression T_EQUAL $@11 sumExpression .
   85 sumExpression: sumExpression . T_ADD $@12 prodExpression
   87              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 106
    T_SUBTRACT  shift, and go to state 107

    $default  reduce using rule 82 (relExpression)


State 171

   90 prodExpression: prodExpression T_MULTIPLY $@14 unaryExpression .

    $default  reduce using rule 90 (prodExpression)


State 172

   92 prodExpression: prodExpression T_DIVIDE $@15 unaryExpression .

    $default  reduce using rule 92 (prodExpression)


State 173

   94 prodExpression: prodExpression T_MOD $@16 unaryExpression .

    $default  reduce using rule 94 (prodExpression)


State 174

  120 selectionStmt: T_IF '(' logicalExpression ')' $@20 . blockStmt else

    '{'  shift, and go to state 28

    blockStmt  go to state 178


State 175

  125 iterationStmt: T_WHILE '(' logicalExpression ')' $@22 . statement

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_VOID        shift, and go to state 1
    T_IF          shift, and go to state 47
    T_WHILE       shift, and go to state 48
    T_BREAK       shift, and go to state 49
    T_CONTINUE    shift, and go to state 50
    T_RETURN      shift, and go to state 51
    T_INT         shift, and go to state 2
    T_FLOAT       shift, and go to state 3
    T_DOUBLE      shift, and go to state 4
    T_CHAR        shift, and go to state 5
    T_BOOL        shift, and go to state 6
    T_NOT         shift, and go to state 52
    T_DECREMENT   shift, and go to state 53
    T_INCREMENT   shift, and go to state 54
    T_IDENTIFIER  shift, and go to state 55
    ';'           shift, and go to state 56
    '('           shift, and go to state 57
    '{'           shift, and go to state 28

    $default  reduce using rule 103 ($@19)

    varDec             go to state 59
    type               go to state 60
    funcCall           go to state 61
    expression         go to state 62
    incDecExpression   go to state 63
    logicalExpression  go to state 64
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72
    statement          go to state 179
    expressionStmt     go to state 74
    blockStmt          go to state 75
    selectionStmt      go to state 76
    iterationStmt      go to state 77
    returnStmt         go to state 78
    breakStmt          go to state 79
    contStmt           go to state 80


State 176

   37 funcCall: T_IDENTIFIER '(' args ')' ';' .

    $default  reduce using rule 37 (funcCall)


State 177

   46 argList: argList ',' expression .

    $default  reduce using rule 46 (argList)


State 178

  120 selectionStmt: T_IF '(' logicalExpression ')' $@20 blockStmt . else

    T_ELSE  shift, and go to state 180

    $default  reduce using rule 123 (else)

    else  go to state 181


State 179

  125 iterationStmt: T_WHILE '(' logicalExpression ')' $@22 statement .

    $default  reduce using rule 125 (iterationStmt)


State 180

  122 else: T_ELSE . $@21 statement

    $default  reduce using rule 121 ($@21)

    $@21  go to state 182


State 181

  120 selectionStmt: T_IF '(' logicalExpression ')' $@20 blockStmt else .

    $default  reduce using rule 120 (selectionStmt)


State 182

  122 else: T_ELSE $@21 . statement

    T_ADD         shift, and go to state 45
    T_SUBTRACT    shift, and go to state 46
    T_VOID        shift, and go to state 1
    T_IF          shift, and go to state 47
    T_WHILE       shift, and go to state 48
    T_BREAK       shift, and go to state 49
    T_CONTINUE    shift, and go to state 50
    T_RETURN      shift, and go to state 51
    T_INT         shift, and go to state 2
    T_FLOAT       shift, and go to state 3
    T_DOUBLE      shift, and go to state 4
    T_CHAR        shift, and go to state 5
    T_BOOL        shift, and go to state 6
    T_NOT         shift, and go to state 52
    T_DECREMENT   shift, and go to state 53
    T_INCREMENT   shift, and go to state 54
    T_IDENTIFIER  shift, and go to state 55
    ';'           shift, and go to state 56
    '('           shift, and go to state 57
    '{'           shift, and go to state 28

    $default  reduce using rule 103 ($@19)

    varDec             go to state 59
    type               go to state 60
    funcCall           go to state 61
    expression         go to state 62
    incDecExpression   go to state 63
    logicalExpression  go to state 64
    andExpression      go to state 65
    notExpression      go to state 66
    relExpression      go to state 67
    sumExpression      go to state 68
    prodExpression     go to state 69
    unaryExpression    go to state 70
    factor             go to state 71
    $@19               go to state 72
    statement          go to state 183
    expressionStmt     go to state 74
    blockStmt          go to state 75
    selectionStmt      go to state 76
    iterationStmt      go to state 77
    returnStmt         go to state 78
    breakStmt          go to state 79
    contStmt           go to state 80


State 183

  122 else: T_ELSE $@21 statement .

    $default  reduce using rule 122 (else)
