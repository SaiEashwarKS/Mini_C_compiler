Terminals unused in grammar

    T_FOR
    T_DO
    T_GOTO
    T_CONTINUE
    T_SWITCH
    T_CASE
    T_DEFAULT
    T_SHORT
    T_LONG
    T_LONG_INT
    T_SIGNED
    T_UNSIGNED


Grammar

    0 $accept: program $end

    1 program: declarations
    2        | %empty

    3 declarations: declaration declarations
    4             | declaration

    5 declaration: varDec ';'
    6            | funcDec

    7 varDec: type varDecList

    8 varDecList: varDecList ',' varDecType
    9           | varDecType

   10 varDecType: varOnlyDec
   11           | varInit

   12 varOnlyDec: T_IDENTIFIER
   13           | T_IDENTIFIER arrayDims

   14 arrayDims: '[' T_INT_CONSTANT ']' arrayDims
   15          | '[' T_INT_CONSTANT ']'

   16 varInit: varOnlyDec T_ASSIGN assignmentExpression

   17 type: type pointer
   18     | T_INT
   19     | T_FLOAT
   20     | T_DOUBLE
   21     | T_CHAR
   22     | T_VOID
   23     | T_BOOL

   24 pointer: T_MULTIPLY pointer
   25        | T_MULTIPLY

   26 constants: T_HEX_CONSTANT
   27          | T_DEC_CONSTANT
   28          | T_INT_CONSTANT
   29          | T_BOOL_CONSTANT
   30          | T_STRING

   31 funcDec: funcOnlyDec ';'
   32        | funcDef

   33 funcOnlyDec: type funcName '(' params ')'

   34 funcName: T_MAIN
   35         | T_IDENTIFIER

   36 funcDef: funcOnlyDec blockStmt

   37 funcCall: T_IDENTIFIER '(' args ')' ';'

   38 params: paramList
   39       | %empty

   40 paramList: paramList ',' type paramID
   41          | paramID

   42 paramID: T_IDENTIFIER
   43        | T_IDENTIFIER '[' ']'

   44 args: argList
   45     | %empty

   46 argList: argList ',' expression
   47        | expression

   48 assignmentOp: T_ADD_ASSIGN
   49             | T_SUB_ASSIGN
   50             | T_MUL_ASSIGN
   51             | T_DIV_ASSIGN
   52             | T_MOD_ASSIGN
   53             | T_ASSIGN

   54 ternaryOpExpression: logicalExpression '?' expression ':' ternaryOpExpression
   55                    | logicalExpression

   56 expression: T_IDENTIFIER assignmentOp assignmentExpression
   57           | T_MULTIPLY T_IDENTIFIER assignmentOp assignmentExpression
   58           | incDecExpression
   59           | logicalExpression

   60 assignmentExpression: ternaryOpExpression
   61                     | T_IDENTIFIER assignmentOp assignmentExpression

   62 incDecExpression: T_INCREMENT T_IDENTIFIER
   63                 | T_IDENTIFIER T_INCREMENT
   64                 | T_DECREMENT T_IDENTIFIER
   65                 | T_IDENTIFIER T_DECREMENT

   66 logicalExpression: logicalExpression T_LG_OR andExpression
   67                  | andExpression

   68 andExpression: andExpression T_LG_AND notExpression
   69              | notExpression

   70 notExpression: T_NOT notExpression
   71              | relExpression

   72 relExpression: sumExpression T_GREATER_THAN sumExpression
   73              | sumExpression T_LESSER_THAN sumExpression
   74              | sumExpression T_LESSER_EQ sumExpression
   75              | sumExpression T_GREATER_EQ sumExpression
   76              | sumExpression T_NOT_EQ sumExpression
   77              | sumExpression T_EQUAL sumExpression
   78              | sumExpression

   79 sumExpression: sumExpression T_ADD prodExpression
   80              | sumExpression T_SUBTRACT prodExpression
   81              | prodExpression

   82 prodExpression: prodExpression T_MULTIPLY unaryExpression
   83               | prodExpression T_DIVIDE unaryExpression
   84               | prodExpression T_MOD unaryExpression
   85               | unaryExpression

   86 unaryExpression: T_ADD unaryExpression
   87                | T_SUBTRACT unaryExpression
   88                | factor

   89 factor: T_IDENTIFIER
   90       | '(' expression ')'
   91       | constants

   92 statement: expressionStmt
   93          | blockStmt
   94          | selectionStmt
   95          | iterationStmt
   96          | returnStmt
   97          | breakStmt
   98          | funcCall
   99          | varDec ';'

  100 expressionStmt: expression ';'
  101               | ';'

  102 blockStmt: '{' stmtList '}'

  103 stmtList: statement stmtList
  104         | %empty

  105 selectionStmt: T_IF '(' logicalExpression ')' statement
  106              | T_IF '(' logicalExpression ')' statement T_ELSE statement

  107 iterationStmt: T_WHILE '(' logicalExpression ')' statement

  108 returnStmt: T_RETURN expressionStmt

  109 breakStmt: T_BREAK ';'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 33 37 90 105 106 107
    ')' (41) 33 37 90 105 106 107
    ',' (44) 8 40 46
    ':' (58) 54
    ';' (59) 5 31 37 99 100 101 109
    '?' (63) 54
    '[' (91) 14 15 43
    ']' (93) 14 15 43
    '{' (123) 102
    '}' (125) 102
    error (256)
    T_ADD (258) 79 86
    T_SUBTRACT (259) 80 87
    T_MULTIPLY (260) 24 25 57 82
    T_DIVIDE (261) 83
    T_ADD_ASSIGN (262) 48
    T_SUB_ASSIGN (263) 49
    T_MUL_ASSIGN (264) 50
    T_DIV_ASSIGN (265) 51
    T_MOD_ASSIGN (266) 52
    T_MOD (267) 84
    T_GREATER_THAN (268) 72
    T_LESSER_THAN (269) 73
    T_LESSER_EQ (270) 74
    T_GREATER_EQ (271) 75
    T_NOT_EQ (272) 76
    T_EQUAL (273) 77
    T_VOID (274) 22
    T_IF (275) 105 106
    T_ELSE (276) 106
    T_FOR (277)
    T_DO (278)
    T_WHILE (279) 107
    T_GOTO (280)
    T_BREAK (281) 109
    T_CONTINUE (282)
    T_RETURN (283) 108
    T_SWITCH (284)
    T_CASE (285)
    T_DEFAULT (286)
    T_MAIN (287) 34
    T_INT (288) 18
    T_FLOAT (289) 19
    T_DOUBLE (290) 20
    T_SHORT (291)
    T_LONG (292)
    T_LONG_INT (293)
    T_CHAR (294) 21
    T_SIGNED (295)
    T_UNSIGNED (296)
    T_BOOL (297) 23
    T_LG_OR (298) 66
    T_LG_AND (299) 68
    T_NOT (300) 70
    T_ASSIGN (301) 16 53
    T_DECREMENT (302) 64 65
    T_INCREMENT (303) 62 63
    T_HEX_CONSTANT <dval> (304) 26
    T_DEC_CONSTANT <dval> (305) 27
    T_INT_CONSTANT <dval> (306) 14 15 28
    T_BOOL_CONSTANT <dval> (307) 29
    T_STRING <str> (308) 30
    T_IDENTIFIER <tbEntry> (309) 12 13 35 37 42 43 56 57 61 62 63 64 65 89
    T_IFX (310)


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    program (67)
        on left: 1 2
        on right: 0
    declarations (68)
        on left: 3 4
        on right: 1 3
    declaration (69)
        on left: 5 6
        on right: 3 4
    varDec (70)
        on left: 7
        on right: 5 99
    varDecList (71)
        on left: 8 9
        on right: 7 8
    varDecType (72)
        on left: 10 11
        on right: 8 9
    varOnlyDec (73)
        on left: 12 13
        on right: 10 16
    arrayDims (74)
        on left: 14 15
        on right: 13 14
    varInit (75)
        on left: 16
        on right: 11
    type (76)
        on left: 17 18 19 20 21 22 23
        on right: 7 17 33 40
    pointer (77)
        on left: 24 25
        on right: 17 24
    constants (78)
        on left: 26 27 28 29 30
        on right: 91
    funcDec (79)
        on left: 31 32
        on right: 6
    funcOnlyDec (80)
        on left: 33
        on right: 31 36
    funcName (81)
        on left: 34 35
        on right: 33
    funcDef (82)
        on left: 36
        on right: 32
    funcCall (83)
        on left: 37
        on right: 98
    params (84)
        on left: 38 39
        on right: 33
    paramList (85)
        on left: 40 41
        on right: 38 40
    paramID (86)
        on left: 42 43
        on right: 40 41
    args (87)
        on left: 44 45
        on right: 37
    argList (88)
        on left: 46 47
        on right: 44 46
    assignmentOp (89)
        on left: 48 49 50 51 52 53
        on right: 56 57 61
    ternaryOpExpression (90)
        on left: 54 55
        on right: 54 60
    expression (91)
        on left: 56 57 58 59
        on right: 46 47 54 90 100
    assignmentExpression (92)
        on left: 60 61
        on right: 16 56 57 61
    incDecExpression (93)
        on left: 62 63 64 65
        on right: 58
    logicalExpression (94)
        on left: 66 67
        on right: 54 55 59 66 105 106 107
    andExpression (95)
        on left: 68 69
        on right: 66 67 68
    notExpression (96)
        on left: 70 71
        on right: 68 69 70
    relExpression (97)
        on left: 72 73 74 75 76 77 78
        on right: 71
    sumExpression (98)
        on left: 79 80 81
        on right: 72 73 74 75 76 77 78 79 80
    prodExpression (99)
        on left: 82 83 84 85
        on right: 79 80 81 82 83 84
    unaryExpression (100)
        on left: 86 87 88
        on right: 82 83 84 85 86 87
    factor (101)
        on left: 89 90 91
        on right: 88
    statement (102)
        on left: 92 93 94 95 96 97 98 99
        on right: 103 105 106 107
    expressionStmt (103)
        on left: 100 101
        on right: 92 108
    blockStmt (104)
        on left: 102
        on right: 36 93
    stmtList (105)
        on left: 103 104
        on right: 102 103
    selectionStmt (106)
        on left: 105 106
        on right: 94
    iterationStmt (107)
        on left: 107
        on right: 95
    returnStmt (108)
        on left: 108
        on right: 96
    breakStmt (109)
        on left: 109
        on right: 97


State 0

    0 $accept: . program $end

    T_VOID    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_DOUBLE  shift, and go to state 4
    T_CHAR    shift, and go to state 5
    T_BOOL    shift, and go to state 6

    $default  reduce using rule 2 (program)

    program       go to state 7
    declarations  go to state 8
    declaration   go to state 9
    varDec        go to state 10
    type          go to state 11
    funcDec       go to state 12
    funcOnlyDec   go to state 13
    funcDef       go to state 14


State 1

   22 type: T_VOID .

    $default  reduce using rule 22 (type)


State 2

   18 type: T_INT .

    $default  reduce using rule 18 (type)


State 3

   19 type: T_FLOAT .

    $default  reduce using rule 19 (type)


State 4

   20 type: T_DOUBLE .

    $default  reduce using rule 20 (type)


State 5

   21 type: T_CHAR .

    $default  reduce using rule 21 (type)


State 6

   23 type: T_BOOL .

    $default  reduce using rule 23 (type)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 15


State 8

    1 program: declarations .

    $default  reduce using rule 1 (program)


State 9

    3 declarations: declaration . declarations
    4             | declaration .

    T_VOID    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_DOUBLE  shift, and go to state 4
    T_CHAR    shift, and go to state 5
    T_BOOL    shift, and go to state 6

    $default  reduce using rule 4 (declarations)

    declarations  go to state 16
    declaration   go to state 9
    varDec        go to state 10
    type          go to state 11
    funcDec       go to state 12
    funcOnlyDec   go to state 13
    funcDef       go to state 14


State 10

    5 declaration: varDec . ';'

    ';'  shift, and go to state 17


State 11

    7 varDec: type . varDecList
   17 type: type . pointer
   33 funcOnlyDec: type . funcName '(' params ')'

    T_MULTIPLY    shift, and go to state 18
    T_MAIN        shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20

    varDecList  go to state 21
    varDecType  go to state 22
    varOnlyDec  go to state 23
    varInit     go to state 24
    pointer     go to state 25
    funcName    go to state 26


State 12

    6 declaration: funcDec .

    $default  reduce using rule 6 (declaration)


State 13

   31 funcDec: funcOnlyDec . ';'
   36 funcDef: funcOnlyDec . blockStmt

    ';'  shift, and go to state 27
    '{'  shift, and go to state 28

    blockStmt  go to state 29


State 14

   32 funcDec: funcDef .

    $default  reduce using rule 32 (funcDec)


State 15

    0 $accept: program $end .

    $default  accept


State 16

    3 declarations: declaration declarations .

    $default  reduce using rule 3 (declarations)


State 17

    5 declaration: varDec ';' .

    $default  reduce using rule 5 (declaration)


State 18

   24 pointer: T_MULTIPLY . pointer
   25        | T_MULTIPLY .

    $default  reduce using rule 25 (pointer)

    pointer  go to state 30


State 19

   34 funcName: T_MAIN .

    $default  reduce using rule 34 (funcName)


State 20

   12 varOnlyDec: T_IDENTIFIER .
   13           | T_IDENTIFIER . arrayDims
   35 funcName: T_IDENTIFIER .

    '['  shift, and go to state 31

    '('       reduce using rule 35 (funcName)
    $default  reduce using rule 12 (varOnlyDec)

    arrayDims  go to state 32


State 21

    7 varDec: type varDecList .
    8 varDecList: varDecList . ',' varDecType

    ','  shift, and go to state 33

    $default  reduce using rule 7 (varDec)


State 22

    9 varDecList: varDecType .

    $default  reduce using rule 9 (varDecList)


State 23

   10 varDecType: varOnlyDec .
   16 varInit: varOnlyDec . T_ASSIGN assignmentExpression

    T_ASSIGN  shift, and go to state 34

    $default  reduce using rule 10 (varDecType)


State 24

   11 varDecType: varInit .

    $default  reduce using rule 11 (varDecType)


State 25

   17 type: type pointer .

    $default  reduce using rule 17 (type)


State 26

   33 funcOnlyDec: type funcName . '(' params ')'

    '('  shift, and go to state 35


State 27

   31 funcDec: funcOnlyDec ';' .

    $default  reduce using rule 31 (funcDec)


State 28

  102 blockStmt: '{' . stmtList '}'

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_MULTIPLY       shift, and go to state 38
    T_VOID           shift, and go to state 1
    T_IF             shift, and go to state 39
    T_WHILE          shift, and go to state 40
    T_BREAK          shift, and go to state 41
    T_RETURN         shift, and go to state 42
    T_INT            shift, and go to state 2
    T_FLOAT          shift, and go to state 3
    T_DOUBLE         shift, and go to state 4
    T_CHAR           shift, and go to state 5
    T_BOOL           shift, and go to state 6
    T_NOT            shift, and go to state 43
    T_DECREMENT      shift, and go to state 44
    T_INCREMENT      shift, and go to state 45
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 51
    ';'              shift, and go to state 52
    '('              shift, and go to state 53
    '{'              shift, and go to state 28

    $default  reduce using rule 104 (stmtList)

    varDec             go to state 54
    type               go to state 55
    constants          go to state 56
    funcCall           go to state 57
    expression         go to state 58
    incDecExpression   go to state 59
    logicalExpression  go to state 60
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67
    statement          go to state 68
    expressionStmt     go to state 69
    blockStmt          go to state 70
    stmtList           go to state 71
    selectionStmt      go to state 72
    iterationStmt      go to state 73
    returnStmt         go to state 74
    breakStmt          go to state 75


State 29

   36 funcDef: funcOnlyDec blockStmt .

    $default  reduce using rule 36 (funcDef)


State 30

   24 pointer: T_MULTIPLY pointer .

    $default  reduce using rule 24 (pointer)


State 31

   14 arrayDims: '[' . T_INT_CONSTANT ']' arrayDims
   15          | '[' . T_INT_CONSTANT ']'

    T_INT_CONSTANT  shift, and go to state 76


State 32

   13 varOnlyDec: T_IDENTIFIER arrayDims .

    $default  reduce using rule 13 (varOnlyDec)


State 33

    8 varDecList: varDecList ',' . varDecType

    T_IDENTIFIER  shift, and go to state 77

    varDecType  go to state 78
    varOnlyDec  go to state 23
    varInit     go to state 24


State 34

   16 varInit: varOnlyDec T_ASSIGN . assignmentExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_NOT            shift, and go to state 43
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 79
    '('              shift, and go to state 53

    constants             go to state 56
    ternaryOpExpression   go to state 80
    assignmentExpression  go to state 81
    logicalExpression     go to state 82
    andExpression         go to state 61
    notExpression         go to state 62
    relExpression         go to state 63
    sumExpression         go to state 64
    prodExpression        go to state 65
    unaryExpression       go to state 66
    factor                go to state 67


State 35

   33 funcOnlyDec: type funcName '(' . params ')'

    T_IDENTIFIER  shift, and go to state 83

    $default  reduce using rule 39 (params)

    params     go to state 84
    paramList  go to state 85
    paramID    go to state 86


State 36

   86 unaryExpression: T_ADD . unaryExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    unaryExpression  go to state 88
    factor           go to state 67


State 37

   87 unaryExpression: T_SUBTRACT . unaryExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    unaryExpression  go to state 89
    factor           go to state 67


State 38

   57 expression: T_MULTIPLY . T_IDENTIFIER assignmentOp assignmentExpression

    T_IDENTIFIER  shift, and go to state 90


State 39

  105 selectionStmt: T_IF . '(' logicalExpression ')' statement
  106              | T_IF . '(' logicalExpression ')' statement T_ELSE statement

    '('  shift, and go to state 91


State 40

  107 iterationStmt: T_WHILE . '(' logicalExpression ')' statement

    '('  shift, and go to state 92


State 41

  109 breakStmt: T_BREAK . ';'

    ';'  shift, and go to state 93


State 42

  108 returnStmt: T_RETURN . expressionStmt

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_MULTIPLY       shift, and go to state 38
    T_NOT            shift, and go to state 43
    T_DECREMENT      shift, and go to state 44
    T_INCREMENT      shift, and go to state 45
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 94
    ';'              shift, and go to state 52
    '('              shift, and go to state 53

    constants          go to state 56
    expression         go to state 58
    incDecExpression   go to state 59
    logicalExpression  go to state 60
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67
    expressionStmt     go to state 95


State 43

   70 notExpression: T_NOT . notExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_NOT            shift, and go to state 43
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    notExpression    go to state 96
    relExpression    go to state 63
    sumExpression    go to state 64
    prodExpression   go to state 65
    unaryExpression  go to state 66
    factor           go to state 67


State 44

   64 incDecExpression: T_DECREMENT . T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 97


State 45

   62 incDecExpression: T_INCREMENT . T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 98


State 46

   26 constants: T_HEX_CONSTANT .

    $default  reduce using rule 26 (constants)


State 47

   27 constants: T_DEC_CONSTANT .

    $default  reduce using rule 27 (constants)


State 48

   28 constants: T_INT_CONSTANT .

    $default  reduce using rule 28 (constants)


State 49

   29 constants: T_BOOL_CONSTANT .

    $default  reduce using rule 29 (constants)


State 50

   30 constants: T_STRING .

    $default  reduce using rule 30 (constants)


State 51

   37 funcCall: T_IDENTIFIER . '(' args ')' ';'
   56 expression: T_IDENTIFIER . assignmentOp assignmentExpression
   63 incDecExpression: T_IDENTIFIER . T_INCREMENT
   65                 | T_IDENTIFIER . T_DECREMENT
   89 factor: T_IDENTIFIER .

    T_ADD_ASSIGN  shift, and go to state 99
    T_SUB_ASSIGN  shift, and go to state 100
    T_MUL_ASSIGN  shift, and go to state 101
    T_DIV_ASSIGN  shift, and go to state 102
    T_MOD_ASSIGN  shift, and go to state 103
    T_ASSIGN      shift, and go to state 104
    T_DECREMENT   shift, and go to state 105
    T_INCREMENT   shift, and go to state 106
    '('           shift, and go to state 107

    $default  reduce using rule 89 (factor)

    assignmentOp  go to state 108


State 52

  101 expressionStmt: ';' .

    $default  reduce using rule 101 (expressionStmt)


State 53

   90 factor: '(' . expression ')'

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_MULTIPLY       shift, and go to state 38
    T_NOT            shift, and go to state 43
    T_DECREMENT      shift, and go to state 44
    T_INCREMENT      shift, and go to state 45
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 94
    '('              shift, and go to state 53

    constants          go to state 56
    expression         go to state 109
    incDecExpression   go to state 59
    logicalExpression  go to state 60
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67


State 54

   99 statement: varDec . ';'

    ';'  shift, and go to state 110


State 55

    7 varDec: type . varDecList
   17 type: type . pointer

    T_MULTIPLY    shift, and go to state 18
    T_IDENTIFIER  shift, and go to state 77

    varDecList  go to state 21
    varDecType  go to state 22
    varOnlyDec  go to state 23
    varInit     go to state 24
    pointer     go to state 25


State 56

   91 factor: constants .

    $default  reduce using rule 91 (factor)


State 57

   98 statement: funcCall .

    $default  reduce using rule 98 (statement)


State 58

  100 expressionStmt: expression . ';'

    ';'  shift, and go to state 111


State 59

   58 expression: incDecExpression .

    $default  reduce using rule 58 (expression)


State 60

   59 expression: logicalExpression .
   66 logicalExpression: logicalExpression . T_LG_OR andExpression

    T_LG_OR  shift, and go to state 112

    $default  reduce using rule 59 (expression)


State 61

   67 logicalExpression: andExpression .
   68 andExpression: andExpression . T_LG_AND notExpression

    T_LG_AND  shift, and go to state 113

    $default  reduce using rule 67 (logicalExpression)


State 62

   69 andExpression: notExpression .

    $default  reduce using rule 69 (andExpression)


State 63

   71 notExpression: relExpression .

    $default  reduce using rule 71 (notExpression)


State 64

   72 relExpression: sumExpression . T_GREATER_THAN sumExpression
   73              | sumExpression . T_LESSER_THAN sumExpression
   74              | sumExpression . T_LESSER_EQ sumExpression
   75              | sumExpression . T_GREATER_EQ sumExpression
   76              | sumExpression . T_NOT_EQ sumExpression
   77              | sumExpression . T_EQUAL sumExpression
   78              | sumExpression .
   79 sumExpression: sumExpression . T_ADD prodExpression
   80              | sumExpression . T_SUBTRACT prodExpression

    T_ADD           shift, and go to state 114
    T_SUBTRACT      shift, and go to state 115
    T_GREATER_THAN  shift, and go to state 116
    T_LESSER_THAN   shift, and go to state 117
    T_LESSER_EQ     shift, and go to state 118
    T_GREATER_EQ    shift, and go to state 119
    T_NOT_EQ        shift, and go to state 120
    T_EQUAL         shift, and go to state 121

    $default  reduce using rule 78 (relExpression)


State 65

   81 sumExpression: prodExpression .
   82 prodExpression: prodExpression . T_MULTIPLY unaryExpression
   83               | prodExpression . T_DIVIDE unaryExpression
   84               | prodExpression . T_MOD unaryExpression

    T_MULTIPLY  shift, and go to state 122
    T_DIVIDE    shift, and go to state 123
    T_MOD       shift, and go to state 124

    $default  reduce using rule 81 (sumExpression)


State 66

   85 prodExpression: unaryExpression .

    $default  reduce using rule 85 (prodExpression)


State 67

   88 unaryExpression: factor .

    $default  reduce using rule 88 (unaryExpression)


State 68

  103 stmtList: statement . stmtList

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_MULTIPLY       shift, and go to state 38
    T_VOID           shift, and go to state 1
    T_IF             shift, and go to state 39
    T_WHILE          shift, and go to state 40
    T_BREAK          shift, and go to state 41
    T_RETURN         shift, and go to state 42
    T_INT            shift, and go to state 2
    T_FLOAT          shift, and go to state 3
    T_DOUBLE         shift, and go to state 4
    T_CHAR           shift, and go to state 5
    T_BOOL           shift, and go to state 6
    T_NOT            shift, and go to state 43
    T_DECREMENT      shift, and go to state 44
    T_INCREMENT      shift, and go to state 45
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 51
    ';'              shift, and go to state 52
    '('              shift, and go to state 53
    '{'              shift, and go to state 28

    $default  reduce using rule 104 (stmtList)

    varDec             go to state 54
    type               go to state 55
    constants          go to state 56
    funcCall           go to state 57
    expression         go to state 58
    incDecExpression   go to state 59
    logicalExpression  go to state 60
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67
    statement          go to state 68
    expressionStmt     go to state 69
    blockStmt          go to state 70
    stmtList           go to state 125
    selectionStmt      go to state 72
    iterationStmt      go to state 73
    returnStmt         go to state 74
    breakStmt          go to state 75


State 69

   92 statement: expressionStmt .

    $default  reduce using rule 92 (statement)


State 70

   93 statement: blockStmt .

    $default  reduce using rule 93 (statement)


State 71

  102 blockStmt: '{' stmtList . '}'

    '}'  shift, and go to state 126


State 72

   94 statement: selectionStmt .

    $default  reduce using rule 94 (statement)


State 73

   95 statement: iterationStmt .

    $default  reduce using rule 95 (statement)


State 74

   96 statement: returnStmt .

    $default  reduce using rule 96 (statement)


State 75

   97 statement: breakStmt .

    $default  reduce using rule 97 (statement)


State 76

   14 arrayDims: '[' T_INT_CONSTANT . ']' arrayDims
   15          | '[' T_INT_CONSTANT . ']'

    ']'  shift, and go to state 127


State 77

   12 varOnlyDec: T_IDENTIFIER .
   13           | T_IDENTIFIER . arrayDims

    '['  shift, and go to state 31

    $default  reduce using rule 12 (varOnlyDec)

    arrayDims  go to state 32


State 78

    8 varDecList: varDecList ',' varDecType .

    $default  reduce using rule 8 (varDecList)


State 79

   61 assignmentExpression: T_IDENTIFIER . assignmentOp assignmentExpression
   89 factor: T_IDENTIFIER .

    T_ADD_ASSIGN  shift, and go to state 99
    T_SUB_ASSIGN  shift, and go to state 100
    T_MUL_ASSIGN  shift, and go to state 101
    T_DIV_ASSIGN  shift, and go to state 102
    T_MOD_ASSIGN  shift, and go to state 103
    T_ASSIGN      shift, and go to state 104

    $default  reduce using rule 89 (factor)

    assignmentOp  go to state 128


State 80

   60 assignmentExpression: ternaryOpExpression .

    $default  reduce using rule 60 (assignmentExpression)


State 81

   16 varInit: varOnlyDec T_ASSIGN assignmentExpression .

    $default  reduce using rule 16 (varInit)


State 82

   54 ternaryOpExpression: logicalExpression . '?' expression ':' ternaryOpExpression
   55                    | logicalExpression .
   66 logicalExpression: logicalExpression . T_LG_OR andExpression

    T_LG_OR  shift, and go to state 112
    '?'      shift, and go to state 129

    $default  reduce using rule 55 (ternaryOpExpression)


State 83

   42 paramID: T_IDENTIFIER .
   43        | T_IDENTIFIER . '[' ']'

    '['  shift, and go to state 130

    $default  reduce using rule 42 (paramID)


State 84

   33 funcOnlyDec: type funcName '(' params . ')'

    ')'  shift, and go to state 131


State 85

   38 params: paramList .
   40 paramList: paramList . ',' type paramID

    ','  shift, and go to state 132

    $default  reduce using rule 38 (params)


State 86

   41 paramList: paramID .

    $default  reduce using rule 41 (paramList)


State 87

   89 factor: T_IDENTIFIER .

    $default  reduce using rule 89 (factor)


State 88

   86 unaryExpression: T_ADD unaryExpression .

    $default  reduce using rule 86 (unaryExpression)


State 89

   87 unaryExpression: T_SUBTRACT unaryExpression .

    $default  reduce using rule 87 (unaryExpression)


State 90

   57 expression: T_MULTIPLY T_IDENTIFIER . assignmentOp assignmentExpression

    T_ADD_ASSIGN  shift, and go to state 99
    T_SUB_ASSIGN  shift, and go to state 100
    T_MUL_ASSIGN  shift, and go to state 101
    T_DIV_ASSIGN  shift, and go to state 102
    T_MOD_ASSIGN  shift, and go to state 103
    T_ASSIGN      shift, and go to state 104

    assignmentOp  go to state 133


State 91

  105 selectionStmt: T_IF '(' . logicalExpression ')' statement
  106              | T_IF '(' . logicalExpression ')' statement T_ELSE statement

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_NOT            shift, and go to state 43
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants          go to state 56
    logicalExpression  go to state 134
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67


State 92

  107 iterationStmt: T_WHILE '(' . logicalExpression ')' statement

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_NOT            shift, and go to state 43
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants          go to state 56
    logicalExpression  go to state 135
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67


State 93

  109 breakStmt: T_BREAK ';' .

    $default  reduce using rule 109 (breakStmt)


State 94

   56 expression: T_IDENTIFIER . assignmentOp assignmentExpression
   63 incDecExpression: T_IDENTIFIER . T_INCREMENT
   65                 | T_IDENTIFIER . T_DECREMENT
   89 factor: T_IDENTIFIER .

    T_ADD_ASSIGN  shift, and go to state 99
    T_SUB_ASSIGN  shift, and go to state 100
    T_MUL_ASSIGN  shift, and go to state 101
    T_DIV_ASSIGN  shift, and go to state 102
    T_MOD_ASSIGN  shift, and go to state 103
    T_ASSIGN      shift, and go to state 104
    T_DECREMENT   shift, and go to state 105
    T_INCREMENT   shift, and go to state 106

    $default  reduce using rule 89 (factor)

    assignmentOp  go to state 108


State 95

  108 returnStmt: T_RETURN expressionStmt .

    $default  reduce using rule 108 (returnStmt)


State 96

   70 notExpression: T_NOT notExpression .

    $default  reduce using rule 70 (notExpression)


State 97

   64 incDecExpression: T_DECREMENT T_IDENTIFIER .

    $default  reduce using rule 64 (incDecExpression)


State 98

   62 incDecExpression: T_INCREMENT T_IDENTIFIER .

    $default  reduce using rule 62 (incDecExpression)


State 99

   48 assignmentOp: T_ADD_ASSIGN .

    $default  reduce using rule 48 (assignmentOp)


State 100

   49 assignmentOp: T_SUB_ASSIGN .

    $default  reduce using rule 49 (assignmentOp)


State 101

   50 assignmentOp: T_MUL_ASSIGN .

    $default  reduce using rule 50 (assignmentOp)


State 102

   51 assignmentOp: T_DIV_ASSIGN .

    $default  reduce using rule 51 (assignmentOp)


State 103

   52 assignmentOp: T_MOD_ASSIGN .

    $default  reduce using rule 52 (assignmentOp)


State 104

   53 assignmentOp: T_ASSIGN .

    $default  reduce using rule 53 (assignmentOp)


State 105

   65 incDecExpression: T_IDENTIFIER T_DECREMENT .

    $default  reduce using rule 65 (incDecExpression)


State 106

   63 incDecExpression: T_IDENTIFIER T_INCREMENT .

    $default  reduce using rule 63 (incDecExpression)


State 107

   37 funcCall: T_IDENTIFIER '(' . args ')' ';'

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_MULTIPLY       shift, and go to state 38
    T_NOT            shift, and go to state 43
    T_DECREMENT      shift, and go to state 44
    T_INCREMENT      shift, and go to state 45
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 94
    '('              shift, and go to state 53

    $default  reduce using rule 45 (args)

    constants          go to state 56
    args               go to state 136
    argList            go to state 137
    expression         go to state 138
    incDecExpression   go to state 59
    logicalExpression  go to state 60
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67


State 108

   56 expression: T_IDENTIFIER assignmentOp . assignmentExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_NOT            shift, and go to state 43
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 79
    '('              shift, and go to state 53

    constants             go to state 56
    ternaryOpExpression   go to state 80
    assignmentExpression  go to state 139
    logicalExpression     go to state 82
    andExpression         go to state 61
    notExpression         go to state 62
    relExpression         go to state 63
    sumExpression         go to state 64
    prodExpression        go to state 65
    unaryExpression       go to state 66
    factor                go to state 67


State 109

   90 factor: '(' expression . ')'

    ')'  shift, and go to state 140


State 110

   99 statement: varDec ';' .

    $default  reduce using rule 99 (statement)


State 111

  100 expressionStmt: expression ';' .

    $default  reduce using rule 100 (expressionStmt)


State 112

   66 logicalExpression: logicalExpression T_LG_OR . andExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_NOT            shift, and go to state 43
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    andExpression    go to state 141
    notExpression    go to state 62
    relExpression    go to state 63
    sumExpression    go to state 64
    prodExpression   go to state 65
    unaryExpression  go to state 66
    factor           go to state 67


State 113

   68 andExpression: andExpression T_LG_AND . notExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_NOT            shift, and go to state 43
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    notExpression    go to state 142
    relExpression    go to state 63
    sumExpression    go to state 64
    prodExpression   go to state 65
    unaryExpression  go to state 66
    factor           go to state 67


State 114

   79 sumExpression: sumExpression T_ADD . prodExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    prodExpression   go to state 143
    unaryExpression  go to state 66
    factor           go to state 67


State 115

   80 sumExpression: sumExpression T_SUBTRACT . prodExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    prodExpression   go to state 144
    unaryExpression  go to state 66
    factor           go to state 67


State 116

   72 relExpression: sumExpression T_GREATER_THAN . sumExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    sumExpression    go to state 145
    prodExpression   go to state 65
    unaryExpression  go to state 66
    factor           go to state 67


State 117

   73 relExpression: sumExpression T_LESSER_THAN . sumExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    sumExpression    go to state 146
    prodExpression   go to state 65
    unaryExpression  go to state 66
    factor           go to state 67


State 118

   74 relExpression: sumExpression T_LESSER_EQ . sumExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    sumExpression    go to state 147
    prodExpression   go to state 65
    unaryExpression  go to state 66
    factor           go to state 67


State 119

   75 relExpression: sumExpression T_GREATER_EQ . sumExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    sumExpression    go to state 148
    prodExpression   go to state 65
    unaryExpression  go to state 66
    factor           go to state 67


State 120

   76 relExpression: sumExpression T_NOT_EQ . sumExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    sumExpression    go to state 149
    prodExpression   go to state 65
    unaryExpression  go to state 66
    factor           go to state 67


State 121

   77 relExpression: sumExpression T_EQUAL . sumExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    sumExpression    go to state 150
    prodExpression   go to state 65
    unaryExpression  go to state 66
    factor           go to state 67


State 122

   82 prodExpression: prodExpression T_MULTIPLY . unaryExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    unaryExpression  go to state 151
    factor           go to state 67


State 123

   83 prodExpression: prodExpression T_DIVIDE . unaryExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    unaryExpression  go to state 152
    factor           go to state 67


State 124

   84 prodExpression: prodExpression T_MOD . unaryExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants        go to state 56
    unaryExpression  go to state 153
    factor           go to state 67


State 125

  103 stmtList: statement stmtList .

    $default  reduce using rule 103 (stmtList)


State 126

  102 blockStmt: '{' stmtList '}' .

    $default  reduce using rule 102 (blockStmt)


State 127

   14 arrayDims: '[' T_INT_CONSTANT ']' . arrayDims
   15          | '[' T_INT_CONSTANT ']' .

    '['  shift, and go to state 31

    $default  reduce using rule 15 (arrayDims)

    arrayDims  go to state 154


State 128

   61 assignmentExpression: T_IDENTIFIER assignmentOp . assignmentExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_NOT            shift, and go to state 43
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 79
    '('              shift, and go to state 53

    constants             go to state 56
    ternaryOpExpression   go to state 80
    assignmentExpression  go to state 155
    logicalExpression     go to state 82
    andExpression         go to state 61
    notExpression         go to state 62
    relExpression         go to state 63
    sumExpression         go to state 64
    prodExpression        go to state 65
    unaryExpression       go to state 66
    factor                go to state 67


State 129

   54 ternaryOpExpression: logicalExpression '?' . expression ':' ternaryOpExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_MULTIPLY       shift, and go to state 38
    T_NOT            shift, and go to state 43
    T_DECREMENT      shift, and go to state 44
    T_INCREMENT      shift, and go to state 45
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 94
    '('              shift, and go to state 53

    constants          go to state 56
    expression         go to state 156
    incDecExpression   go to state 59
    logicalExpression  go to state 60
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67


State 130

   43 paramID: T_IDENTIFIER '[' . ']'

    ']'  shift, and go to state 157


State 131

   33 funcOnlyDec: type funcName '(' params ')' .

    $default  reduce using rule 33 (funcOnlyDec)


State 132

   40 paramList: paramList ',' . type paramID

    T_VOID    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_DOUBLE  shift, and go to state 4
    T_CHAR    shift, and go to state 5
    T_BOOL    shift, and go to state 6

    type  go to state 158


State 133

   57 expression: T_MULTIPLY T_IDENTIFIER assignmentOp . assignmentExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_NOT            shift, and go to state 43
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 79
    '('              shift, and go to state 53

    constants             go to state 56
    ternaryOpExpression   go to state 80
    assignmentExpression  go to state 159
    logicalExpression     go to state 82
    andExpression         go to state 61
    notExpression         go to state 62
    relExpression         go to state 63
    sumExpression         go to state 64
    prodExpression        go to state 65
    unaryExpression       go to state 66
    factor                go to state 67


State 134

   66 logicalExpression: logicalExpression . T_LG_OR andExpression
  105 selectionStmt: T_IF '(' logicalExpression . ')' statement
  106              | T_IF '(' logicalExpression . ')' statement T_ELSE statement

    T_LG_OR  shift, and go to state 112
    ')'      shift, and go to state 160


State 135

   66 logicalExpression: logicalExpression . T_LG_OR andExpression
  107 iterationStmt: T_WHILE '(' logicalExpression . ')' statement

    T_LG_OR  shift, and go to state 112
    ')'      shift, and go to state 161


State 136

   37 funcCall: T_IDENTIFIER '(' args . ')' ';'

    ')'  shift, and go to state 162


State 137

   44 args: argList .
   46 argList: argList . ',' expression

    ','  shift, and go to state 163

    $default  reduce using rule 44 (args)


State 138

   47 argList: expression .

    $default  reduce using rule 47 (argList)


State 139

   56 expression: T_IDENTIFIER assignmentOp assignmentExpression .

    $default  reduce using rule 56 (expression)


State 140

   90 factor: '(' expression ')' .

    $default  reduce using rule 90 (factor)


State 141

   66 logicalExpression: logicalExpression T_LG_OR andExpression .
   68 andExpression: andExpression . T_LG_AND notExpression

    T_LG_AND  shift, and go to state 113

    $default  reduce using rule 66 (logicalExpression)


State 142

   68 andExpression: andExpression T_LG_AND notExpression .

    $default  reduce using rule 68 (andExpression)


State 143

   79 sumExpression: sumExpression T_ADD prodExpression .
   82 prodExpression: prodExpression . T_MULTIPLY unaryExpression
   83               | prodExpression . T_DIVIDE unaryExpression
   84               | prodExpression . T_MOD unaryExpression

    T_MULTIPLY  shift, and go to state 122
    T_DIVIDE    shift, and go to state 123
    T_MOD       shift, and go to state 124

    $default  reduce using rule 79 (sumExpression)


State 144

   80 sumExpression: sumExpression T_SUBTRACT prodExpression .
   82 prodExpression: prodExpression . T_MULTIPLY unaryExpression
   83               | prodExpression . T_DIVIDE unaryExpression
   84               | prodExpression . T_MOD unaryExpression

    T_MULTIPLY  shift, and go to state 122
    T_DIVIDE    shift, and go to state 123
    T_MOD       shift, and go to state 124

    $default  reduce using rule 80 (sumExpression)


State 145

   72 relExpression: sumExpression T_GREATER_THAN sumExpression .
   79 sumExpression: sumExpression . T_ADD prodExpression
   80              | sumExpression . T_SUBTRACT prodExpression

    T_ADD       shift, and go to state 114
    T_SUBTRACT  shift, and go to state 115

    $default  reduce using rule 72 (relExpression)


State 146

   73 relExpression: sumExpression T_LESSER_THAN sumExpression .
   79 sumExpression: sumExpression . T_ADD prodExpression
   80              | sumExpression . T_SUBTRACT prodExpression

    T_ADD       shift, and go to state 114
    T_SUBTRACT  shift, and go to state 115

    $default  reduce using rule 73 (relExpression)


State 147

   74 relExpression: sumExpression T_LESSER_EQ sumExpression .
   79 sumExpression: sumExpression . T_ADD prodExpression
   80              | sumExpression . T_SUBTRACT prodExpression

    T_ADD       shift, and go to state 114
    T_SUBTRACT  shift, and go to state 115

    $default  reduce using rule 74 (relExpression)


State 148

   75 relExpression: sumExpression T_GREATER_EQ sumExpression .
   79 sumExpression: sumExpression . T_ADD prodExpression
   80              | sumExpression . T_SUBTRACT prodExpression

    T_ADD       shift, and go to state 114
    T_SUBTRACT  shift, and go to state 115

    $default  reduce using rule 75 (relExpression)


State 149

   76 relExpression: sumExpression T_NOT_EQ sumExpression .
   79 sumExpression: sumExpression . T_ADD prodExpression
   80              | sumExpression . T_SUBTRACT prodExpression

    T_ADD       shift, and go to state 114
    T_SUBTRACT  shift, and go to state 115

    $default  reduce using rule 76 (relExpression)


State 150

   77 relExpression: sumExpression T_EQUAL sumExpression .
   79 sumExpression: sumExpression . T_ADD prodExpression
   80              | sumExpression . T_SUBTRACT prodExpression

    T_ADD       shift, and go to state 114
    T_SUBTRACT  shift, and go to state 115

    $default  reduce using rule 77 (relExpression)


State 151

   82 prodExpression: prodExpression T_MULTIPLY unaryExpression .

    $default  reduce using rule 82 (prodExpression)


State 152

   83 prodExpression: prodExpression T_DIVIDE unaryExpression .

    $default  reduce using rule 83 (prodExpression)


State 153

   84 prodExpression: prodExpression T_MOD unaryExpression .

    $default  reduce using rule 84 (prodExpression)


State 154

   14 arrayDims: '[' T_INT_CONSTANT ']' arrayDims .

    $default  reduce using rule 14 (arrayDims)


State 155

   61 assignmentExpression: T_IDENTIFIER assignmentOp assignmentExpression .

    $default  reduce using rule 61 (assignmentExpression)


State 156

   54 ternaryOpExpression: logicalExpression '?' expression . ':' ternaryOpExpression

    ':'  shift, and go to state 164


State 157

   43 paramID: T_IDENTIFIER '[' ']' .

    $default  reduce using rule 43 (paramID)


State 158

   17 type: type . pointer
   40 paramList: paramList ',' type . paramID

    T_MULTIPLY    shift, and go to state 18
    T_IDENTIFIER  shift, and go to state 83

    pointer  go to state 25
    paramID  go to state 165


State 159

   57 expression: T_MULTIPLY T_IDENTIFIER assignmentOp assignmentExpression .

    $default  reduce using rule 57 (expression)


State 160

  105 selectionStmt: T_IF '(' logicalExpression ')' . statement
  106              | T_IF '(' logicalExpression ')' . statement T_ELSE statement

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_MULTIPLY       shift, and go to state 38
    T_VOID           shift, and go to state 1
    T_IF             shift, and go to state 39
    T_WHILE          shift, and go to state 40
    T_BREAK          shift, and go to state 41
    T_RETURN         shift, and go to state 42
    T_INT            shift, and go to state 2
    T_FLOAT          shift, and go to state 3
    T_DOUBLE         shift, and go to state 4
    T_CHAR           shift, and go to state 5
    T_BOOL           shift, and go to state 6
    T_NOT            shift, and go to state 43
    T_DECREMENT      shift, and go to state 44
    T_INCREMENT      shift, and go to state 45
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 51
    ';'              shift, and go to state 52
    '('              shift, and go to state 53
    '{'              shift, and go to state 28

    varDec             go to state 54
    type               go to state 55
    constants          go to state 56
    funcCall           go to state 57
    expression         go to state 58
    incDecExpression   go to state 59
    logicalExpression  go to state 60
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67
    statement          go to state 166
    expressionStmt     go to state 69
    blockStmt          go to state 70
    selectionStmt      go to state 72
    iterationStmt      go to state 73
    returnStmt         go to state 74
    breakStmt          go to state 75


State 161

  107 iterationStmt: T_WHILE '(' logicalExpression ')' . statement

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_MULTIPLY       shift, and go to state 38
    T_VOID           shift, and go to state 1
    T_IF             shift, and go to state 39
    T_WHILE          shift, and go to state 40
    T_BREAK          shift, and go to state 41
    T_RETURN         shift, and go to state 42
    T_INT            shift, and go to state 2
    T_FLOAT          shift, and go to state 3
    T_DOUBLE         shift, and go to state 4
    T_CHAR           shift, and go to state 5
    T_BOOL           shift, and go to state 6
    T_NOT            shift, and go to state 43
    T_DECREMENT      shift, and go to state 44
    T_INCREMENT      shift, and go to state 45
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 51
    ';'              shift, and go to state 52
    '('              shift, and go to state 53
    '{'              shift, and go to state 28

    varDec             go to state 54
    type               go to state 55
    constants          go to state 56
    funcCall           go to state 57
    expression         go to state 58
    incDecExpression   go to state 59
    logicalExpression  go to state 60
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67
    statement          go to state 167
    expressionStmt     go to state 69
    blockStmt          go to state 70
    selectionStmt      go to state 72
    iterationStmt      go to state 73
    returnStmt         go to state 74
    breakStmt          go to state 75


State 162

   37 funcCall: T_IDENTIFIER '(' args ')' . ';'

    ';'  shift, and go to state 168


State 163

   46 argList: argList ',' . expression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_MULTIPLY       shift, and go to state 38
    T_NOT            shift, and go to state 43
    T_DECREMENT      shift, and go to state 44
    T_INCREMENT      shift, and go to state 45
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 94
    '('              shift, and go to state 53

    constants          go to state 56
    expression         go to state 169
    incDecExpression   go to state 59
    logicalExpression  go to state 60
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67


State 164

   54 ternaryOpExpression: logicalExpression '?' expression ':' . ternaryOpExpression

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_NOT            shift, and go to state 43
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 87
    '('              shift, and go to state 53

    constants            go to state 56
    ternaryOpExpression  go to state 170
    logicalExpression    go to state 82
    andExpression        go to state 61
    notExpression        go to state 62
    relExpression        go to state 63
    sumExpression        go to state 64
    prodExpression       go to state 65
    unaryExpression      go to state 66
    factor               go to state 67


State 165

   40 paramList: paramList ',' type paramID .

    $default  reduce using rule 40 (paramList)


State 166

  105 selectionStmt: T_IF '(' logicalExpression ')' statement .
  106              | T_IF '(' logicalExpression ')' statement . T_ELSE statement

    T_ELSE  shift, and go to state 171

    $default  reduce using rule 105 (selectionStmt)


State 167

  107 iterationStmt: T_WHILE '(' logicalExpression ')' statement .

    $default  reduce using rule 107 (iterationStmt)


State 168

   37 funcCall: T_IDENTIFIER '(' args ')' ';' .

    $default  reduce using rule 37 (funcCall)


State 169

   46 argList: argList ',' expression .

    $default  reduce using rule 46 (argList)


State 170

   54 ternaryOpExpression: logicalExpression '?' expression ':' ternaryOpExpression .

    $default  reduce using rule 54 (ternaryOpExpression)


State 171

  106 selectionStmt: T_IF '(' logicalExpression ')' statement T_ELSE . statement

    T_ADD            shift, and go to state 36
    T_SUBTRACT       shift, and go to state 37
    T_MULTIPLY       shift, and go to state 38
    T_VOID           shift, and go to state 1
    T_IF             shift, and go to state 39
    T_WHILE          shift, and go to state 40
    T_BREAK          shift, and go to state 41
    T_RETURN         shift, and go to state 42
    T_INT            shift, and go to state 2
    T_FLOAT          shift, and go to state 3
    T_DOUBLE         shift, and go to state 4
    T_CHAR           shift, and go to state 5
    T_BOOL           shift, and go to state 6
    T_NOT            shift, and go to state 43
    T_DECREMENT      shift, and go to state 44
    T_INCREMENT      shift, and go to state 45
    T_HEX_CONSTANT   shift, and go to state 46
    T_DEC_CONSTANT   shift, and go to state 47
    T_INT_CONSTANT   shift, and go to state 48
    T_BOOL_CONSTANT  shift, and go to state 49
    T_STRING         shift, and go to state 50
    T_IDENTIFIER     shift, and go to state 51
    ';'              shift, and go to state 52
    '('              shift, and go to state 53
    '{'              shift, and go to state 28

    varDec             go to state 54
    type               go to state 55
    constants          go to state 56
    funcCall           go to state 57
    expression         go to state 58
    incDecExpression   go to state 59
    logicalExpression  go to state 60
    andExpression      go to state 61
    notExpression      go to state 62
    relExpression      go to state 63
    sumExpression      go to state 64
    prodExpression     go to state 65
    unaryExpression    go to state 66
    factor             go to state 67
    statement          go to state 172
    expressionStmt     go to state 69
    blockStmt          go to state 70
    selectionStmt      go to state 72
    iterationStmt      go to state 73
    returnStmt         go to state 74
    breakStmt          go to state 75


State 172

  106 selectionStmt: T_IF '(' logicalExpression ')' statement T_ELSE statement .

    $default  reduce using rule 106 (selectionStmt)
