Terminals unused in grammar

    T_FOR
    T_DO
    T_GOTO
    T_SWITCH
    T_CASE
    T_DEFAULT
    T_SHORT
    T_LONG
    T_LONG_INT
    T_SIGNED
    T_UNSIGNED


Grammar

    0 $accept: program $end

    1 program: declarations
    2        | %empty

    3 declarations: declaration declarations
    4             | declaration

    5 declaration: varDec ';'
    6            | funcDec

    7 varDec: type varDecList

    8 varDecList: varDecList ',' varDecType
    9           | varDecType

   10 varDecType: varOnlyDec
   11           | varInit

   12 varOnlyDec: T_IDENTIFIER
   13           | T_IDENTIFIER arrayDims

   14 $@1: %empty

   15 arrayDims: '[' T_INT_CONSTANT ']' $@1 arrayDims
   16          | '[' T_INT_CONSTANT ']'

   17 varInit: varOnlyDec T_ASSIGN expression

   18 type: type pointer
   19     | T_INT
   20     | T_FLOAT
   21     | T_DOUBLE
   22     | T_CHAR
   23     | T_VOID
   24     | T_BOOL

   25 pointer: T_MULTIPLY pointer
   26        | T_MULTIPLY

   27 constants: T_HEX_CONSTANT
   28          | T_DEC_CONSTANT
   29          | T_INT_CONSTANT
   30          | T_BOOL_CONSTANT
   31          | T_STRING

   32 funcDec: funcOnlyDec ';'
   33        | funcDef

   34 funcOnlyDec: type funcName '(' params ')'

   35 funcName: T_MAIN
   36         | T_IDENTIFIER

   37 funcDef: funcOnlyDec blockStmt

   38 funcCall: T_IDENTIFIER '(' args ')' ';'

   39 params: paramList
   40       | %empty

   41 paramList: paramList ',' type paramID
   42          | paramID

   43 paramID: T_IDENTIFIER
   44        | T_IDENTIFIER '[' ']'

   45 args: argList
   46     | %empty

   47 argList: argList ',' expression
   48        | expression

   49 assignmentOp: T_ADD_ASSIGN
   50             | T_SUB_ASSIGN
   51             | T_MUL_ASSIGN
   52             | T_DIV_ASSIGN
   53             | T_MOD_ASSIGN
   54             | T_ASSIGN

   55 $@2: %empty

   56 expression: T_IDENTIFIER $@2 assignmentOp expression
   57           | incDecExpression
   58           | logicalExpression

   59 incDecExpression: T_INCREMENT T_IDENTIFIER
   60                 | T_IDENTIFIER T_INCREMENT
   61                 | T_DECREMENT T_IDENTIFIER
   62                 | T_IDENTIFIER T_DECREMENT

   63 $@3: %empty

   64 logicalExpression: logicalExpression T_LG_OR $@3 andExpression
   65                  | andExpression

   66 $@4: %empty

   67 andExpression: andExpression T_LG_AND $@4 notExpression
   68              | notExpression

   69 $@5: %empty

   70 notExpression: T_NOT $@5 notExpression
   71              | relExpression

   72 $@6: %empty

   73 relExpression: sumExpression T_GREATER_THAN $@6 sumExpression

   74 $@7: %empty

   75 relExpression: sumExpression T_LESSER_THAN $@7 sumExpression

   76 $@8: %empty

   77 relExpression: sumExpression T_LESSER_EQ $@8 sumExpression

   78 $@9: %empty

   79 relExpression: sumExpression T_GREATER_EQ $@9 sumExpression

   80 $@10: %empty

   81 relExpression: sumExpression T_NOT_EQ $@10 sumExpression

   82 $@11: %empty

   83 relExpression: sumExpression T_EQUAL $@11 sumExpression
   84              | sumExpression

   85 $@12: %empty

   86 sumExpression: sumExpression T_ADD $@12 prodExpression

   87 $@13: %empty

   88 sumExpression: sumExpression T_SUBTRACT $@13 prodExpression
   89              | prodExpression

   90 $@14: %empty

   91 prodExpression: prodExpression T_MULTIPLY $@14 unaryExpression

   92 $@15: %empty

   93 prodExpression: prodExpression T_DIVIDE $@15 unaryExpression
   94               | prodExpression T_MOD unaryExpression
   95               | unaryExpression

   96 $@16: %empty

   97 unaryExpression: T_ADD $@16 unaryExpression

   98 $@17: %empty

   99 unaryExpression: T_SUBTRACT $@17 unaryExpression
  100                | factor

  101 factor: T_IDENTIFIER
  102       | '(' expression ')'

  103 $@18: %empty

  104 factor: $@18 constants

  105 statement: expressionStmt
  106          | blockStmt
  107          | selectionStmt
  108          | iterationStmt
  109          | returnStmt
  110          | breakStmt
  111          | contStmt
  112          | funcCall
  113          | varDec ';'

  114 expressionStmt: expression ';'
  115               | ';'

  116 blockStmt: '{' stmtList '}'

  117 stmtList: statement stmtList
  118         | %empty

  119 selectionStmt: T_IF '(' logicalExpression ')' statement
  120              | T_IF '(' logicalExpression ')' statement T_ELSE statement

  121 $@19: %empty

  122 iterationStmt: T_WHILE '(' logicalExpression ')' $@19 statement

  123 returnStmt: T_RETURN expressionStmt

  124 breakStmt: T_BREAK ';'

  125 contStmt: T_CONTINUE ';'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 34 38 102 119 120 122
    ')' (41) 34 38 102 119 120 122
    ',' (44) 8 41 47
    ';' (59) 5 32 38 113 114 115 124 125
    '[' (91) 15 16 44
    ']' (93) 15 16 44
    '{' (123) 116
    '}' (125) 116
    error (256)
    T_ADD (258) 86 97
    T_SUBTRACT (259) 88 99
    T_MULTIPLY (260) 25 26 91
    T_DIVIDE (261) 93
    T_ADD_ASSIGN (262) 49
    T_SUB_ASSIGN (263) 50
    T_MUL_ASSIGN (264) 51
    T_DIV_ASSIGN (265) 52
    T_MOD_ASSIGN (266) 53
    T_MOD (267) 94
    T_GREATER_THAN (268) 73
    T_LESSER_THAN (269) 75
    T_LESSER_EQ (270) 77
    T_GREATER_EQ (271) 79
    T_NOT_EQ (272) 81
    T_EQUAL (273) 83
    T_VOID (274) 23
    T_IF (275) 119 120
    T_ELSE (276) 120
    T_FOR (277)
    T_DO (278)
    T_WHILE (279) 122
    T_GOTO (280)
    T_BREAK (281) 124
    T_CONTINUE (282) 125
    T_RETURN (283) 123
    T_SWITCH (284)
    T_CASE (285)
    T_DEFAULT (286)
    T_MAIN (287) 35
    T_INT (288) 19
    T_FLOAT (289) 20
    T_DOUBLE (290) 21
    T_SHORT (291)
    T_LONG (292)
    T_LONG_INT (293)
    T_CHAR (294) 22
    T_SIGNED (295)
    T_UNSIGNED (296)
    T_BOOL (297) 24
    T_LG_OR (298) 64
    T_LG_AND (299) 67
    T_NOT (300) 70
    T_ASSIGN (301) 17 54
    T_DECREMENT (302) 61 62
    T_INCREMENT (303) 59 60
    T_HEX_CONSTANT <dval> (304) 27
    T_DEC_CONSTANT <dval> (305) 28
    T_INT_CONSTANT <dval> (306) 15 16 29
    T_STRING <str> (307) 31
    T_BOOL_CONSTANT <str> (308) 30
    T_IDENTIFIER <tbEntry> (309) 12 13 36 38 43 44 56 59 60 61 62 101
    T_IFX (310)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program (65)
        on left: 1 2
        on right: 0
    declarations (66)
        on left: 3 4
        on right: 1 3
    declaration (67)
        on left: 5 6
        on right: 3 4
    varDec (68)
        on left: 7
        on right: 5 113
    varDecList (69)
        on left: 8 9
        on right: 7 8
    varDecType (70)
        on left: 10 11
        on right: 8 9
    varOnlyDec <str> (71)
        on left: 12 13
        on right: 10 17
    arrayDims (72)
        on left: 15 16
        on right: 13 15
    $@1 (73)
        on left: 14
        on right: 15
    varInit (74)
        on left: 17
        on right: 11
    type (75)
        on left: 18 19 20 21 22 23 24
        on right: 7 18 34 41
    pointer (76)
        on left: 25 26
        on right: 18 25
    constants <str> (77)
        on left: 27 28 29 30 31
        on right: 104
    funcDec (78)
        on left: 32 33
        on right: 6
    funcOnlyDec (79)
        on left: 34
        on right: 32 37
    funcName (80)
        on left: 35 36
        on right: 34
    funcDef (81)
        on left: 37
        on right: 33
    funcCall (82)
        on left: 38
        on right: 112
    params (83)
        on left: 39 40
        on right: 34
    paramList (84)
        on left: 41 42
        on right: 39 41
    paramID (85)
        on left: 43 44
        on right: 41 42
    args (86)
        on left: 45 46
        on right: 38
    argList (87)
        on left: 47 48
        on right: 45 47
    assignmentOp (88)
        on left: 49 50 51 52 53 54
        on right: 56
    expression <str> (89)
        on left: 56 57 58
        on right: 17 47 48 56 102 114
    $@2 (90)
        on left: 55
        on right: 56
    incDecExpression <str> (91)
        on left: 59 60 61 62
        on right: 57
    logicalExpression <str> (92)
        on left: 64 65
        on right: 58 64 119 120 122
    $@3 (93)
        on left: 63
        on right: 64
    andExpression <str> (94)
        on left: 67 68
        on right: 64 65 67
    $@4 (95)
        on left: 66
        on right: 67
    notExpression <str> (96)
        on left: 70 71
        on right: 67 68 70
    $@5 (97)
        on left: 69
        on right: 70
    relExpression <str> (98)
        on left: 73 75 77 79 81 83 84
        on right: 71
    $@6 (99)
        on left: 72
        on right: 73
    $@7 (100)
        on left: 74
        on right: 75
    $@8 (101)
        on left: 76
        on right: 77
    $@9 (102)
        on left: 78
        on right: 79
    $@10 (103)
        on left: 80
        on right: 81
    $@11 (104)
        on left: 82
        on right: 83
    sumExpression <str> (105)
        on left: 86 88 89
        on right: 73 75 77 79 81 83 84 86 88
    $@12 (106)
        on left: 85
        on right: 86
    $@13 (107)
        on left: 87
        on right: 88
    prodExpression <str> (108)
        on left: 91 93 94 95
        on right: 86 88 89 91 93 94
    $@14 (109)
        on left: 90
        on right: 91
    $@15 (110)
        on left: 92
        on right: 93
    unaryExpression <str> (111)
        on left: 97 99 100
        on right: 91 93 94 95 97 99
    $@16 (112)
        on left: 96
        on right: 97
    $@17 (113)
        on left: 98
        on right: 99
    factor <str> (114)
        on left: 101 102 104
        on right: 100
    $@18 (115)
        on left: 103
        on right: 104
    statement (116)
        on left: 105 106 107 108 109 110 111 112 113
        on right: 117 119 120 122
    expressionStmt <str> (117)
        on left: 114 115
        on right: 105 123
    blockStmt (118)
        on left: 116
        on right: 37 106
    stmtList (119)
        on left: 117 118
        on right: 116 117
    selectionStmt (120)
        on left: 119 120
        on right: 107
    iterationStmt (121)
        on left: 122
        on right: 108
    $@19 (122)
        on left: 121
        on right: 122
    returnStmt (123)
        on left: 123
        on right: 109
    breakStmt (124)
        on left: 124
        on right: 110
    contStmt (125)
        on left: 125
        on right: 111


State 0

    0 $accept: . program $end

    T_VOID    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_DOUBLE  shift, and go to state 4
    T_CHAR    shift, and go to state 5
    T_BOOL    shift, and go to state 6

    $default  reduce using rule 2 (program)

    program       go to state 7
    declarations  go to state 8
    declaration   go to state 9
    varDec        go to state 10
    type          go to state 11
    funcDec       go to state 12
    funcOnlyDec   go to state 13
    funcDef       go to state 14


State 1

   23 type: T_VOID .

    $default  reduce using rule 23 (type)


State 2

   19 type: T_INT .

    $default  reduce using rule 19 (type)


State 3

   20 type: T_FLOAT .

    $default  reduce using rule 20 (type)


State 4

   21 type: T_DOUBLE .

    $default  reduce using rule 21 (type)


State 5

   22 type: T_CHAR .

    $default  reduce using rule 22 (type)


State 6

   24 type: T_BOOL .

    $default  reduce using rule 24 (type)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 15


State 8

    1 program: declarations .

    $default  reduce using rule 1 (program)


State 9

    3 declarations: declaration . declarations
    4             | declaration .

    T_VOID    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_DOUBLE  shift, and go to state 4
    T_CHAR    shift, and go to state 5
    T_BOOL    shift, and go to state 6

    $default  reduce using rule 4 (declarations)

    declarations  go to state 16
    declaration   go to state 9
    varDec        go to state 10
    type          go to state 11
    funcDec       go to state 12
    funcOnlyDec   go to state 13
    funcDef       go to state 14


State 10

    5 declaration: varDec . ';'

    ';'  shift, and go to state 17


State 11

    7 varDec: type . varDecList
   18 type: type . pointer
   34 funcOnlyDec: type . funcName '(' params ')'

    T_MULTIPLY    shift, and go to state 18
    T_MAIN        shift, and go to state 19
    T_IDENTIFIER  shift, and go to state 20

    varDecList  go to state 21
    varDecType  go to state 22
    varOnlyDec  go to state 23
    varInit     go to state 24
    pointer     go to state 25
    funcName    go to state 26


State 12

    6 declaration: funcDec .

    $default  reduce using rule 6 (declaration)


State 13

   32 funcDec: funcOnlyDec . ';'
   37 funcDef: funcOnlyDec . blockStmt

    ';'  shift, and go to state 27
    '{'  shift, and go to state 28

    blockStmt  go to state 29


State 14

   33 funcDec: funcDef .

    $default  reduce using rule 33 (funcDec)


State 15

    0 $accept: program $end .

    $default  accept


State 16

    3 declarations: declaration declarations .

    $default  reduce using rule 3 (declarations)


State 17

    5 declaration: varDec ';' .

    $default  reduce using rule 5 (declaration)


State 18

   25 pointer: T_MULTIPLY . pointer
   26        | T_MULTIPLY .

    $default  reduce using rule 26 (pointer)

    pointer  go to state 30


State 19

   35 funcName: T_MAIN .

    $default  reduce using rule 35 (funcName)


State 20

   12 varOnlyDec: T_IDENTIFIER .
   13           | T_IDENTIFIER . arrayDims
   36 funcName: T_IDENTIFIER .

    '['  shift, and go to state 31

    '('       reduce using rule 36 (funcName)
    $default  reduce using rule 12 (varOnlyDec)

    arrayDims  go to state 32


State 21

    7 varDec: type varDecList .
    8 varDecList: varDecList . ',' varDecType

    ','  shift, and go to state 33

    $default  reduce using rule 7 (varDec)


State 22

    9 varDecList: varDecType .

    $default  reduce using rule 9 (varDecList)


State 23

   10 varDecType: varOnlyDec .
   17 varInit: varOnlyDec . T_ASSIGN expression

    T_ASSIGN  shift, and go to state 34

    $default  reduce using rule 10 (varDecType)


State 24

   11 varDecType: varInit .

    $default  reduce using rule 11 (varDecType)


State 25

   18 type: type pointer .

    $default  reduce using rule 18 (type)


State 26

   34 funcOnlyDec: type funcName . '(' params ')'

    '('  shift, and go to state 35


State 27

   32 funcDec: funcOnlyDec ';' .

    $default  reduce using rule 32 (funcDec)


State 28

  116 blockStmt: '{' . stmtList '}'

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_VOID        shift, and go to state 1
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_BREAK       shift, and go to state 40
    T_CONTINUE    shift, and go to state 41
    T_RETURN      shift, and go to state 42
    T_INT         shift, and go to state 2
    T_FLOAT       shift, and go to state 3
    T_DOUBLE      shift, and go to state 4
    T_CHAR        shift, and go to state 5
    T_BOOL        shift, and go to state 6
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 46
    ';'           shift, and go to state 47
    '('           shift, and go to state 48
    '{'           shift, and go to state 28

    '}'       reduce using rule 118 (stmtList)
    $default  reduce using rule 103 ($@18)

    varDec             go to state 49
    type               go to state 50
    funcCall           go to state 51
    expression         go to state 52
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62
    statement          go to state 63
    expressionStmt     go to state 64
    blockStmt          go to state 65
    stmtList           go to state 66
    selectionStmt      go to state 67
    iterationStmt      go to state 68
    returnStmt         go to state 69
    breakStmt          go to state 70
    contStmt           go to state 71


State 29

   37 funcDef: funcOnlyDec blockStmt .

    $default  reduce using rule 37 (funcDef)


State 30

   25 pointer: T_MULTIPLY pointer .

    $default  reduce using rule 25 (pointer)


State 31

   15 arrayDims: '[' . T_INT_CONSTANT ']' $@1 arrayDims
   16          | '[' . T_INT_CONSTANT ']'

    T_INT_CONSTANT  shift, and go to state 72


State 32

   13 varOnlyDec: T_IDENTIFIER arrayDims .

    $default  reduce using rule 13 (varOnlyDec)


State 33

    8 varDecList: varDecList ',' . varDecType

    T_IDENTIFIER  shift, and go to state 73

    varDecType  go to state 74
    varOnlyDec  go to state 23
    varInit     go to state 24


State 34

   17 varInit: varOnlyDec T_ASSIGN . expression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 75
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    expression         go to state 76
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62


State 35

   34 funcOnlyDec: type funcName '(' . params ')'

    T_IDENTIFIER  shift, and go to state 77

    $default  reduce using rule 40 (params)

    params     go to state 78
    paramList  go to state 79
    paramID    go to state 80


State 36

   97 unaryExpression: T_ADD . $@16 unaryExpression

    $default  reduce using rule 96 ($@16)

    $@16  go to state 81


State 37

   99 unaryExpression: T_SUBTRACT . $@17 unaryExpression

    $default  reduce using rule 98 ($@17)

    $@17  go to state 82


State 38

  119 selectionStmt: T_IF . '(' logicalExpression ')' statement
  120              | T_IF . '(' logicalExpression ')' statement T_ELSE statement

    '('  shift, and go to state 83


State 39

  122 iterationStmt: T_WHILE . '(' logicalExpression ')' $@19 statement

    '('  shift, and go to state 84


State 40

  124 breakStmt: T_BREAK . ';'

    ';'  shift, and go to state 85


State 41

  125 contStmt: T_CONTINUE . ';'

    ';'  shift, and go to state 86


State 42

  123 returnStmt: T_RETURN . expressionStmt

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 75
    ';'           shift, and go to state 47
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    expression         go to state 52
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62
    expressionStmt     go to state 87


State 43

   70 notExpression: T_NOT . $@5 notExpression

    $default  reduce using rule 69 ($@5)

    $@5  go to state 88


State 44

   61 incDecExpression: T_DECREMENT . T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 89


State 45

   59 incDecExpression: T_INCREMENT . T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 90


State 46

   38 funcCall: T_IDENTIFIER . '(' args ')' ';'
   56 expression: T_IDENTIFIER . $@2 assignmentOp expression
   60 incDecExpression: T_IDENTIFIER . T_INCREMENT
   62                 | T_IDENTIFIER . T_DECREMENT
  101 factor: T_IDENTIFIER .

    T_DECREMENT  shift, and go to state 91
    T_INCREMENT  shift, and go to state 92
    '('          shift, and go to state 93

    T_ADD_ASSIGN  reduce using rule 55 ($@2)
    T_SUB_ASSIGN  reduce using rule 55 ($@2)
    T_MUL_ASSIGN  reduce using rule 55 ($@2)
    T_DIV_ASSIGN  reduce using rule 55 ($@2)
    T_MOD_ASSIGN  reduce using rule 55 ($@2)
    T_ASSIGN      reduce using rule 55 ($@2)
    $default      reduce using rule 101 (factor)

    $@2  go to state 94


State 47

  115 expressionStmt: ';' .

    $default  reduce using rule 115 (expressionStmt)


State 48

  102 factor: '(' . expression ')'

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 75
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    expression         go to state 95
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62


State 49

  113 statement: varDec . ';'

    ';'  shift, and go to state 96


State 50

    7 varDec: type . varDecList
   18 type: type . pointer

    T_MULTIPLY    shift, and go to state 18
    T_IDENTIFIER  shift, and go to state 73

    varDecList  go to state 21
    varDecType  go to state 22
    varOnlyDec  go to state 23
    varInit     go to state 24
    pointer     go to state 25


State 51

  112 statement: funcCall .

    $default  reduce using rule 112 (statement)


State 52

  114 expressionStmt: expression . ';'

    ';'  shift, and go to state 97


State 53

   57 expression: incDecExpression .

    $default  reduce using rule 57 (expression)


State 54

   58 expression: logicalExpression .
   64 logicalExpression: logicalExpression . T_LG_OR $@3 andExpression

    T_LG_OR  shift, and go to state 98

    $default  reduce using rule 58 (expression)


State 55

   65 logicalExpression: andExpression .
   67 andExpression: andExpression . T_LG_AND $@4 notExpression

    T_LG_AND  shift, and go to state 99

    $default  reduce using rule 65 (logicalExpression)


State 56

   68 andExpression: notExpression .

    $default  reduce using rule 68 (andExpression)


State 57

   71 notExpression: relExpression .

    $default  reduce using rule 71 (notExpression)


State 58

   73 relExpression: sumExpression . T_GREATER_THAN $@6 sumExpression
   75              | sumExpression . T_LESSER_THAN $@7 sumExpression
   77              | sumExpression . T_LESSER_EQ $@8 sumExpression
   79              | sumExpression . T_GREATER_EQ $@9 sumExpression
   81              | sumExpression . T_NOT_EQ $@10 sumExpression
   83              | sumExpression . T_EQUAL $@11 sumExpression
   84              | sumExpression .
   86 sumExpression: sumExpression . T_ADD $@12 prodExpression
   88              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD           shift, and go to state 100
    T_SUBTRACT      shift, and go to state 101
    T_GREATER_THAN  shift, and go to state 102
    T_LESSER_THAN   shift, and go to state 103
    T_LESSER_EQ     shift, and go to state 104
    T_GREATER_EQ    shift, and go to state 105
    T_NOT_EQ        shift, and go to state 106
    T_EQUAL         shift, and go to state 107

    $default  reduce using rule 84 (relExpression)


State 59

   89 sumExpression: prodExpression .
   91 prodExpression: prodExpression . T_MULTIPLY $@14 unaryExpression
   93               | prodExpression . T_DIVIDE $@15 unaryExpression
   94               | prodExpression . T_MOD unaryExpression

    T_MULTIPLY  shift, and go to state 108
    T_DIVIDE    shift, and go to state 109
    T_MOD       shift, and go to state 110

    $default  reduce using rule 89 (sumExpression)


State 60

   95 prodExpression: unaryExpression .

    $default  reduce using rule 95 (prodExpression)


State 61

  100 unaryExpression: factor .

    $default  reduce using rule 100 (unaryExpression)


State 62

  104 factor: $@18 . constants

    T_HEX_CONSTANT   shift, and go to state 111
    T_DEC_CONSTANT   shift, and go to state 112
    T_INT_CONSTANT   shift, and go to state 113
    T_STRING         shift, and go to state 114
    T_BOOL_CONSTANT  shift, and go to state 115

    constants  go to state 116


State 63

  117 stmtList: statement . stmtList

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_VOID        shift, and go to state 1
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_BREAK       shift, and go to state 40
    T_CONTINUE    shift, and go to state 41
    T_RETURN      shift, and go to state 42
    T_INT         shift, and go to state 2
    T_FLOAT       shift, and go to state 3
    T_DOUBLE      shift, and go to state 4
    T_CHAR        shift, and go to state 5
    T_BOOL        shift, and go to state 6
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 46
    ';'           shift, and go to state 47
    '('           shift, and go to state 48
    '{'           shift, and go to state 28

    '}'       reduce using rule 118 (stmtList)
    $default  reduce using rule 103 ($@18)

    varDec             go to state 49
    type               go to state 50
    funcCall           go to state 51
    expression         go to state 52
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62
    statement          go to state 63
    expressionStmt     go to state 64
    blockStmt          go to state 65
    stmtList           go to state 117
    selectionStmt      go to state 67
    iterationStmt      go to state 68
    returnStmt         go to state 69
    breakStmt          go to state 70
    contStmt           go to state 71


State 64

  105 statement: expressionStmt .

    $default  reduce using rule 105 (statement)


State 65

  106 statement: blockStmt .

    $default  reduce using rule 106 (statement)


State 66

  116 blockStmt: '{' stmtList . '}'

    '}'  shift, and go to state 118


State 67

  107 statement: selectionStmt .

    $default  reduce using rule 107 (statement)


State 68

  108 statement: iterationStmt .

    $default  reduce using rule 108 (statement)


State 69

  109 statement: returnStmt .

    $default  reduce using rule 109 (statement)


State 70

  110 statement: breakStmt .

    $default  reduce using rule 110 (statement)


State 71

  111 statement: contStmt .

    $default  reduce using rule 111 (statement)


State 72

   15 arrayDims: '[' T_INT_CONSTANT . ']' $@1 arrayDims
   16          | '[' T_INT_CONSTANT . ']'

    ']'  shift, and go to state 119


State 73

   12 varOnlyDec: T_IDENTIFIER .
   13           | T_IDENTIFIER . arrayDims

    '['  shift, and go to state 31

    $default  reduce using rule 12 (varOnlyDec)

    arrayDims  go to state 32


State 74

    8 varDecList: varDecList ',' varDecType .

    $default  reduce using rule 8 (varDecList)


State 75

   56 expression: T_IDENTIFIER . $@2 assignmentOp expression
   60 incDecExpression: T_IDENTIFIER . T_INCREMENT
   62                 | T_IDENTIFIER . T_DECREMENT
  101 factor: T_IDENTIFIER .

    T_DECREMENT  shift, and go to state 91
    T_INCREMENT  shift, and go to state 92

    T_ADD_ASSIGN  reduce using rule 55 ($@2)
    T_SUB_ASSIGN  reduce using rule 55 ($@2)
    T_MUL_ASSIGN  reduce using rule 55 ($@2)
    T_DIV_ASSIGN  reduce using rule 55 ($@2)
    T_MOD_ASSIGN  reduce using rule 55 ($@2)
    T_ASSIGN      reduce using rule 55 ($@2)
    $default      reduce using rule 101 (factor)

    $@2  go to state 94


State 76

   17 varInit: varOnlyDec T_ASSIGN expression .

    $default  reduce using rule 17 (varInit)


State 77

   43 paramID: T_IDENTIFIER .
   44        | T_IDENTIFIER . '[' ']'

    '['  shift, and go to state 120

    $default  reduce using rule 43 (paramID)


State 78

   34 funcOnlyDec: type funcName '(' params . ')'

    ')'  shift, and go to state 121


State 79

   39 params: paramList .
   41 paramList: paramList . ',' type paramID

    ','  shift, and go to state 122

    $default  reduce using rule 39 (params)


State 80

   42 paramList: paramID .

    $default  reduce using rule 42 (paramList)


State 81

   97 unaryExpression: T_ADD $@16 . unaryExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    unaryExpression  go to state 124
    factor           go to state 61
    $@18             go to state 62


State 82

   99 unaryExpression: T_SUBTRACT $@17 . unaryExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    unaryExpression  go to state 125
    factor           go to state 61
    $@18             go to state 62


State 83

  119 selectionStmt: T_IF '(' . logicalExpression ')' statement
  120              | T_IF '(' . logicalExpression ')' statement T_ELSE statement

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    logicalExpression  go to state 126
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62


State 84

  122 iterationStmt: T_WHILE '(' . logicalExpression ')' $@19 statement

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    logicalExpression  go to state 127
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62


State 85

  124 breakStmt: T_BREAK ';' .

    $default  reduce using rule 124 (breakStmt)


State 86

  125 contStmt: T_CONTINUE ';' .

    $default  reduce using rule 125 (contStmt)


State 87

  123 returnStmt: T_RETURN expressionStmt .

    $default  reduce using rule 123 (returnStmt)


State 88

   70 notExpression: T_NOT $@5 . notExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    notExpression    go to state 128
    relExpression    go to state 57
    sumExpression    go to state 58
    prodExpression   go to state 59
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 89

   61 incDecExpression: T_DECREMENT T_IDENTIFIER .

    $default  reduce using rule 61 (incDecExpression)


State 90

   59 incDecExpression: T_INCREMENT T_IDENTIFIER .

    $default  reduce using rule 59 (incDecExpression)


State 91

   62 incDecExpression: T_IDENTIFIER T_DECREMENT .

    $default  reduce using rule 62 (incDecExpression)


State 92

   60 incDecExpression: T_IDENTIFIER T_INCREMENT .

    $default  reduce using rule 60 (incDecExpression)


State 93

   38 funcCall: T_IDENTIFIER '(' . args ')' ';'

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 75
    '('           shift, and go to state 48

    ')'       reduce using rule 46 (args)
    $default  reduce using rule 103 ($@18)

    args               go to state 129
    argList            go to state 130
    expression         go to state 131
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62


State 94

   56 expression: T_IDENTIFIER $@2 . assignmentOp expression

    T_ADD_ASSIGN  shift, and go to state 132
    T_SUB_ASSIGN  shift, and go to state 133
    T_MUL_ASSIGN  shift, and go to state 134
    T_DIV_ASSIGN  shift, and go to state 135
    T_MOD_ASSIGN  shift, and go to state 136
    T_ASSIGN      shift, and go to state 137

    assignmentOp  go to state 138


State 95

  102 factor: '(' expression . ')'

    ')'  shift, and go to state 139


State 96

  113 statement: varDec ';' .

    $default  reduce using rule 113 (statement)


State 97

  114 expressionStmt: expression ';' .

    $default  reduce using rule 114 (expressionStmt)


State 98

   64 logicalExpression: logicalExpression T_LG_OR . $@3 andExpression

    $default  reduce using rule 63 ($@3)

    $@3  go to state 140


State 99

   67 andExpression: andExpression T_LG_AND . $@4 notExpression

    $default  reduce using rule 66 ($@4)

    $@4  go to state 141


State 100

   86 sumExpression: sumExpression T_ADD . $@12 prodExpression

    $default  reduce using rule 85 ($@12)

    $@12  go to state 142


State 101

   88 sumExpression: sumExpression T_SUBTRACT . $@13 prodExpression

    $default  reduce using rule 87 ($@13)

    $@13  go to state 143


State 102

   73 relExpression: sumExpression T_GREATER_THAN . $@6 sumExpression

    $default  reduce using rule 72 ($@6)

    $@6  go to state 144


State 103

   75 relExpression: sumExpression T_LESSER_THAN . $@7 sumExpression

    $default  reduce using rule 74 ($@7)

    $@7  go to state 145


State 104

   77 relExpression: sumExpression T_LESSER_EQ . $@8 sumExpression

    $default  reduce using rule 76 ($@8)

    $@8  go to state 146


State 105

   79 relExpression: sumExpression T_GREATER_EQ . $@9 sumExpression

    $default  reduce using rule 78 ($@9)

    $@9  go to state 147


State 106

   81 relExpression: sumExpression T_NOT_EQ . $@10 sumExpression

    $default  reduce using rule 80 ($@10)

    $@10  go to state 148


State 107

   83 relExpression: sumExpression T_EQUAL . $@11 sumExpression

    $default  reduce using rule 82 ($@11)

    $@11  go to state 149


State 108

   91 prodExpression: prodExpression T_MULTIPLY . $@14 unaryExpression

    $default  reduce using rule 90 ($@14)

    $@14  go to state 150


State 109

   93 prodExpression: prodExpression T_DIVIDE . $@15 unaryExpression

    $default  reduce using rule 92 ($@15)

    $@15  go to state 151


State 110

   94 prodExpression: prodExpression T_MOD . unaryExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    unaryExpression  go to state 152
    factor           go to state 61
    $@18             go to state 62


State 111

   27 constants: T_HEX_CONSTANT .

    $default  reduce using rule 27 (constants)


State 112

   28 constants: T_DEC_CONSTANT .

    $default  reduce using rule 28 (constants)


State 113

   29 constants: T_INT_CONSTANT .

    $default  reduce using rule 29 (constants)


State 114

   31 constants: T_STRING .

    $default  reduce using rule 31 (constants)


State 115

   30 constants: T_BOOL_CONSTANT .

    $default  reduce using rule 30 (constants)


State 116

  104 factor: $@18 constants .

    $default  reduce using rule 104 (factor)


State 117

  117 stmtList: statement stmtList .

    $default  reduce using rule 117 (stmtList)


State 118

  116 blockStmt: '{' stmtList '}' .

    $default  reduce using rule 116 (blockStmt)


State 119

   15 arrayDims: '[' T_INT_CONSTANT ']' . $@1 arrayDims
   16          | '[' T_INT_CONSTANT ']' .

    '['       reduce using rule 14 ($@1)
    $default  reduce using rule 16 (arrayDims)

    $@1  go to state 153


State 120

   44 paramID: T_IDENTIFIER '[' . ']'

    ']'  shift, and go to state 154


State 121

   34 funcOnlyDec: type funcName '(' params ')' .

    $default  reduce using rule 34 (funcOnlyDec)


State 122

   41 paramList: paramList ',' . type paramID

    T_VOID    shift, and go to state 1
    T_INT     shift, and go to state 2
    T_FLOAT   shift, and go to state 3
    T_DOUBLE  shift, and go to state 4
    T_CHAR    shift, and go to state 5
    T_BOOL    shift, and go to state 6

    type  go to state 155


State 123

  101 factor: T_IDENTIFIER .

    $default  reduce using rule 101 (factor)


State 124

   97 unaryExpression: T_ADD $@16 unaryExpression .

    $default  reduce using rule 97 (unaryExpression)


State 125

   99 unaryExpression: T_SUBTRACT $@17 unaryExpression .

    $default  reduce using rule 99 (unaryExpression)


State 126

   64 logicalExpression: logicalExpression . T_LG_OR $@3 andExpression
  119 selectionStmt: T_IF '(' logicalExpression . ')' statement
  120              | T_IF '(' logicalExpression . ')' statement T_ELSE statement

    T_LG_OR  shift, and go to state 98
    ')'      shift, and go to state 156


State 127

   64 logicalExpression: logicalExpression . T_LG_OR $@3 andExpression
  122 iterationStmt: T_WHILE '(' logicalExpression . ')' $@19 statement

    T_LG_OR  shift, and go to state 98
    ')'      shift, and go to state 157


State 128

   70 notExpression: T_NOT $@5 notExpression .

    $default  reduce using rule 70 (notExpression)


State 129

   38 funcCall: T_IDENTIFIER '(' args . ')' ';'

    ')'  shift, and go to state 158


State 130

   45 args: argList .
   47 argList: argList . ',' expression

    ','  shift, and go to state 159

    $default  reduce using rule 45 (args)


State 131

   48 argList: expression .

    $default  reduce using rule 48 (argList)


State 132

   49 assignmentOp: T_ADD_ASSIGN .

    $default  reduce using rule 49 (assignmentOp)


State 133

   50 assignmentOp: T_SUB_ASSIGN .

    $default  reduce using rule 50 (assignmentOp)


State 134

   51 assignmentOp: T_MUL_ASSIGN .

    $default  reduce using rule 51 (assignmentOp)


State 135

   52 assignmentOp: T_DIV_ASSIGN .

    $default  reduce using rule 52 (assignmentOp)


State 136

   53 assignmentOp: T_MOD_ASSIGN .

    $default  reduce using rule 53 (assignmentOp)


State 137

   54 assignmentOp: T_ASSIGN .

    $default  reduce using rule 54 (assignmentOp)


State 138

   56 expression: T_IDENTIFIER $@2 assignmentOp . expression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 75
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    expression         go to state 160
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62


State 139

  102 factor: '(' expression ')' .

    $default  reduce using rule 102 (factor)


State 140

   64 logicalExpression: logicalExpression T_LG_OR $@3 . andExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    andExpression    go to state 161
    notExpression    go to state 56
    relExpression    go to state 57
    sumExpression    go to state 58
    prodExpression   go to state 59
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 141

   67 andExpression: andExpression T_LG_AND $@4 . notExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    notExpression    go to state 162
    relExpression    go to state 57
    sumExpression    go to state 58
    prodExpression   go to state 59
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 142

   86 sumExpression: sumExpression T_ADD $@12 . prodExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    prodExpression   go to state 163
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 143

   88 sumExpression: sumExpression T_SUBTRACT $@13 . prodExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    prodExpression   go to state 164
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 144

   73 relExpression: sumExpression T_GREATER_THAN $@6 . sumExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    sumExpression    go to state 165
    prodExpression   go to state 59
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 145

   75 relExpression: sumExpression T_LESSER_THAN $@7 . sumExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    sumExpression    go to state 166
    prodExpression   go to state 59
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 146

   77 relExpression: sumExpression T_LESSER_EQ $@8 . sumExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    sumExpression    go to state 167
    prodExpression   go to state 59
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 147

   79 relExpression: sumExpression T_GREATER_EQ $@9 . sumExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    sumExpression    go to state 168
    prodExpression   go to state 59
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 148

   81 relExpression: sumExpression T_NOT_EQ $@10 . sumExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    sumExpression    go to state 169
    prodExpression   go to state 59
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 149

   83 relExpression: sumExpression T_EQUAL $@11 . sumExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    sumExpression    go to state 170
    prodExpression   go to state 59
    unaryExpression  go to state 60
    factor           go to state 61
    $@18             go to state 62


State 150

   91 prodExpression: prodExpression T_MULTIPLY $@14 . unaryExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    unaryExpression  go to state 171
    factor           go to state 61
    $@18             go to state 62


State 151

   93 prodExpression: prodExpression T_DIVIDE $@15 . unaryExpression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_IDENTIFIER  shift, and go to state 123
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    unaryExpression  go to state 172
    factor           go to state 61
    $@18             go to state 62


State 152

   94 prodExpression: prodExpression T_MOD unaryExpression .

    $default  reduce using rule 94 (prodExpression)


State 153

   15 arrayDims: '[' T_INT_CONSTANT ']' $@1 . arrayDims

    '['  shift, and go to state 31

    arrayDims  go to state 173


State 154

   44 paramID: T_IDENTIFIER '[' ']' .

    $default  reduce using rule 44 (paramID)


State 155

   18 type: type . pointer
   41 paramList: paramList ',' type . paramID

    T_MULTIPLY    shift, and go to state 18
    T_IDENTIFIER  shift, and go to state 77

    pointer  go to state 25
    paramID  go to state 174


State 156

  119 selectionStmt: T_IF '(' logicalExpression ')' . statement
  120              | T_IF '(' logicalExpression ')' . statement T_ELSE statement

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_VOID        shift, and go to state 1
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_BREAK       shift, and go to state 40
    T_CONTINUE    shift, and go to state 41
    T_RETURN      shift, and go to state 42
    T_INT         shift, and go to state 2
    T_FLOAT       shift, and go to state 3
    T_DOUBLE      shift, and go to state 4
    T_CHAR        shift, and go to state 5
    T_BOOL        shift, and go to state 6
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 46
    ';'           shift, and go to state 47
    '('           shift, and go to state 48
    '{'           shift, and go to state 28

    $default  reduce using rule 103 ($@18)

    varDec             go to state 49
    type               go to state 50
    funcCall           go to state 51
    expression         go to state 52
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62
    statement          go to state 175
    expressionStmt     go to state 64
    blockStmt          go to state 65
    selectionStmt      go to state 67
    iterationStmt      go to state 68
    returnStmt         go to state 69
    breakStmt          go to state 70
    contStmt           go to state 71


State 157

  122 iterationStmt: T_WHILE '(' logicalExpression ')' . $@19 statement

    $default  reduce using rule 121 ($@19)

    $@19  go to state 176


State 158

   38 funcCall: T_IDENTIFIER '(' args ')' . ';'

    ';'  shift, and go to state 177


State 159

   47 argList: argList ',' . expression

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 75
    '('           shift, and go to state 48

    $default  reduce using rule 103 ($@18)

    expression         go to state 178
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62


State 160

   56 expression: T_IDENTIFIER $@2 assignmentOp expression .

    $default  reduce using rule 56 (expression)


State 161

   64 logicalExpression: logicalExpression T_LG_OR $@3 andExpression .
   67 andExpression: andExpression . T_LG_AND $@4 notExpression

    T_LG_AND  shift, and go to state 99

    $default  reduce using rule 64 (logicalExpression)


State 162

   67 andExpression: andExpression T_LG_AND $@4 notExpression .

    $default  reduce using rule 67 (andExpression)


State 163

   86 sumExpression: sumExpression T_ADD $@12 prodExpression .
   91 prodExpression: prodExpression . T_MULTIPLY $@14 unaryExpression
   93               | prodExpression . T_DIVIDE $@15 unaryExpression
   94               | prodExpression . T_MOD unaryExpression

    T_MULTIPLY  shift, and go to state 108
    T_DIVIDE    shift, and go to state 109
    T_MOD       shift, and go to state 110

    $default  reduce using rule 86 (sumExpression)


State 164

   88 sumExpression: sumExpression T_SUBTRACT $@13 prodExpression .
   91 prodExpression: prodExpression . T_MULTIPLY $@14 unaryExpression
   93               | prodExpression . T_DIVIDE $@15 unaryExpression
   94               | prodExpression . T_MOD unaryExpression

    T_MULTIPLY  shift, and go to state 108
    T_DIVIDE    shift, and go to state 109
    T_MOD       shift, and go to state 110

    $default  reduce using rule 88 (sumExpression)


State 165

   73 relExpression: sumExpression T_GREATER_THAN $@6 sumExpression .
   86 sumExpression: sumExpression . T_ADD $@12 prodExpression
   88              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 100
    T_SUBTRACT  shift, and go to state 101

    $default  reduce using rule 73 (relExpression)


State 166

   75 relExpression: sumExpression T_LESSER_THAN $@7 sumExpression .
   86 sumExpression: sumExpression . T_ADD $@12 prodExpression
   88              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 100
    T_SUBTRACT  shift, and go to state 101

    $default  reduce using rule 75 (relExpression)


State 167

   77 relExpression: sumExpression T_LESSER_EQ $@8 sumExpression .
   86 sumExpression: sumExpression . T_ADD $@12 prodExpression
   88              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 100
    T_SUBTRACT  shift, and go to state 101

    $default  reduce using rule 77 (relExpression)


State 168

   79 relExpression: sumExpression T_GREATER_EQ $@9 sumExpression .
   86 sumExpression: sumExpression . T_ADD $@12 prodExpression
   88              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 100
    T_SUBTRACT  shift, and go to state 101

    $default  reduce using rule 79 (relExpression)


State 169

   81 relExpression: sumExpression T_NOT_EQ $@10 sumExpression .
   86 sumExpression: sumExpression . T_ADD $@12 prodExpression
   88              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 100
    T_SUBTRACT  shift, and go to state 101

    $default  reduce using rule 81 (relExpression)


State 170

   83 relExpression: sumExpression T_EQUAL $@11 sumExpression .
   86 sumExpression: sumExpression . T_ADD $@12 prodExpression
   88              | sumExpression . T_SUBTRACT $@13 prodExpression

    T_ADD       shift, and go to state 100
    T_SUBTRACT  shift, and go to state 101

    $default  reduce using rule 83 (relExpression)


State 171

   91 prodExpression: prodExpression T_MULTIPLY $@14 unaryExpression .

    $default  reduce using rule 91 (prodExpression)


State 172

   93 prodExpression: prodExpression T_DIVIDE $@15 unaryExpression .

    $default  reduce using rule 93 (prodExpression)


State 173

   15 arrayDims: '[' T_INT_CONSTANT ']' $@1 arrayDims .

    $default  reduce using rule 15 (arrayDims)


State 174

   41 paramList: paramList ',' type paramID .

    $default  reduce using rule 41 (paramList)


State 175

  119 selectionStmt: T_IF '(' logicalExpression ')' statement .
  120              | T_IF '(' logicalExpression ')' statement . T_ELSE statement

    T_ELSE  shift, and go to state 179

    $default  reduce using rule 119 (selectionStmt)


State 176

  122 iterationStmt: T_WHILE '(' logicalExpression ')' $@19 . statement

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_VOID        shift, and go to state 1
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_BREAK       shift, and go to state 40
    T_CONTINUE    shift, and go to state 41
    T_RETURN      shift, and go to state 42
    T_INT         shift, and go to state 2
    T_FLOAT       shift, and go to state 3
    T_DOUBLE      shift, and go to state 4
    T_CHAR        shift, and go to state 5
    T_BOOL        shift, and go to state 6
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 46
    ';'           shift, and go to state 47
    '('           shift, and go to state 48
    '{'           shift, and go to state 28

    $default  reduce using rule 103 ($@18)

    varDec             go to state 49
    type               go to state 50
    funcCall           go to state 51
    expression         go to state 52
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62
    statement          go to state 180
    expressionStmt     go to state 64
    blockStmt          go to state 65
    selectionStmt      go to state 67
    iterationStmt      go to state 68
    returnStmt         go to state 69
    breakStmt          go to state 70
    contStmt           go to state 71


State 177

   38 funcCall: T_IDENTIFIER '(' args ')' ';' .

    $default  reduce using rule 38 (funcCall)


State 178

   47 argList: argList ',' expression .

    $default  reduce using rule 47 (argList)


State 179

  120 selectionStmt: T_IF '(' logicalExpression ')' statement T_ELSE . statement

    T_ADD         shift, and go to state 36
    T_SUBTRACT    shift, and go to state 37
    T_VOID        shift, and go to state 1
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_BREAK       shift, and go to state 40
    T_CONTINUE    shift, and go to state 41
    T_RETURN      shift, and go to state 42
    T_INT         shift, and go to state 2
    T_FLOAT       shift, and go to state 3
    T_DOUBLE      shift, and go to state 4
    T_CHAR        shift, and go to state 5
    T_BOOL        shift, and go to state 6
    T_NOT         shift, and go to state 43
    T_DECREMENT   shift, and go to state 44
    T_INCREMENT   shift, and go to state 45
    T_IDENTIFIER  shift, and go to state 46
    ';'           shift, and go to state 47
    '('           shift, and go to state 48
    '{'           shift, and go to state 28

    $default  reduce using rule 103 ($@18)

    varDec             go to state 49
    type               go to state 50
    funcCall           go to state 51
    expression         go to state 52
    incDecExpression   go to state 53
    logicalExpression  go to state 54
    andExpression      go to state 55
    notExpression      go to state 56
    relExpression      go to state 57
    sumExpression      go to state 58
    prodExpression     go to state 59
    unaryExpression    go to state 60
    factor             go to state 61
    $@18               go to state 62
    statement          go to state 181
    expressionStmt     go to state 64
    blockStmt          go to state 65
    selectionStmt      go to state 67
    iterationStmt      go to state 68
    returnStmt         go to state 69
    breakStmt          go to state 70
    contStmt           go to state 71


State 180

  122 iterationStmt: T_WHILE '(' logicalExpression ')' $@19 statement .

    $default  reduce using rule 122 (iterationStmt)


State 181

  120 selectionStmt: T_IF '(' logicalExpression ')' statement T_ELSE statement .

    $default  reduce using rule 120 (selectionStmt)
